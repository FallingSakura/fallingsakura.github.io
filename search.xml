<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Base64 Encoding</title>
    <url>/c499c9c8.html</url>
    <content><![CDATA[<h1 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h1><p><a href="https://www.json.cn/document/base64"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202409111035330.webp"
                      alt="image.png"
                ></a></p>
<p>讲解一下它的编码过程。</p>
<p>首先把字符转换成 ASCII 编码，然后把它的 ASCII 编码转换为八位二进制码，按顺序连接在一起，然后从最开始六个二进制码对应一个 0～63 的数字，对应到 Base64 编码表，每 3 个字符对应得到 4 个编码后的结果，某一个 6 位中不全则用 0 补齐，若 6 位都是空则对应编码为 <code>=</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202409111047913.webp"
                      alt="image.png"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202409111047613.webp"
                      alt="image.png"
                ></p>
<p>ASCII (American Standard Information Interchange):</p>
<p><a class="link"   href="https://www.json.cn/document/ascii/" >Link<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>encode</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Note</title>
    <url>/d51d3626.html</url>
    <content><![CDATA[<h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><h2 id="特殊关键字"><a href="#特殊关键字" class="headerlink" title="特殊关键字"></a>特殊关键字</h2><p>如 <code>inherit</code> <code>initial</code> <code>unset</code> 这三个属性值，在任何属性中均可用。</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>我们可以通过添加 <code>class</code> 或者 <code>id</code> 的方式来选择特定的元素为它添加特定的样式。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">	<span class="comment">/* .class to choose a class */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#id</span> &#123;</span><br><span class="line">	<span class="comment">/* #id to choose an id */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="根选择器"><a href="#根选择器" class="headerlink" title="根选择器"></a>根选择器</h3><p><strong><code>:root</code></strong></p>
<p>在 HTML 文件中通常是 <code>&lt;html&gt;</code> 元素，具有全局性和高优先级。</p>
<p>适合定义 CSS 变量。</p>
<p>为什么不使用 <code>*</code> 来定义变量呢？</p>
<ul>
<li><strong>性能问题</strong>：通配选择器会匹配文档中的每一个元素，可能会影响性能，尤其是在大型文档中。</li>
<li><strong>优先级较低</strong>：通配选择器的优先级较低，定义在其中的变量可能会被其他样式覆盖。</li>
<li><strong>语义不明确</strong>：使用 <code>*</code> 来定义全局变量不够直观，无法清楚表达这些变量是全局的，可能会导致混淆。</li>
</ul>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>一个元素可以有多个类名，在引号内用空格隔开。</p>
<p>这时我们想选择既是这个元素同时还有这个类名，那么可以这样写：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-class">.class</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>注意这里两者之间没有空格。</p>
<p>当两者间有空格时，代表 <code>.class</code> 是 <code>body</code> 的后代中的一个类。</p>
<h2 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h2><p>值得一提的是，表单元素的默认样式会覆盖掉默认继承的样式，需要设置为 <code>inherit</code>。</p>
<h2 id="Var"><a href="#Var" class="headerlink" title="Var"></a>Var</h2><p>CSS 变量。</p>
<p>变量使用 <code>--</code> 开头，并通过 <code>var()</code> 函数调用。</p>
<p>可以添加默认值，当该变量未定义时，便可以使用默认值。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--undefined-color, <span class="number">#000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h2><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>: [color];</span><br></pre></td></tr></table></figure></div>

<p><code>color</code> 可以是色名，可以是 rgb，可以是 rgba，可以是十六进制数。</p>
<h2 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h2><p>导入字体。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">../fonts/None.ttf</span>);</span><br><span class="line">  <span class="attribute">font-family</span>: None;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>url</code> 填写字体文件的本地地址&#x2F;云端地址。</p>
<p>导入后为它设定一个 <code>font-family</code>（好听的名字），</p>
<p>然后就可以调用它了。</p>
<h2 id="Margin"><a href="#Margin" class="headerlink" title="Margin"></a>Margin</h2><p>外边距。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin</span>: [length|percentage|auto]</span><br></pre></td></tr></table></figure></div>

<p>值有四个，顺序为<strong>上右下左</strong>，当某位置没有时将按照它对位的间距同步。</p>
<p>如只有两个值时，第一个代表上下外边距，第二个代表左右外边距。</p>
<p>下图为经典盒模型。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model/box-model.png"
                     
                ></p>
<h2 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h2><p>内边距。</p>
<p>即内容到 <code>border</code> 之间的空间。</p>
<h2 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h2><p>边框，其外是 <code>margin</code> 其内是 <code>padding</code>。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: [width] [style] [color];</span><br></pre></td></tr></table></figure></div>

<p>具体的长度单位可以见<a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Values_and_units" >CSS 的值与单位 - 学习 Web 开发 | MDN (mozilla.org)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><strong><code>style</code></strong></p>
<ul>
<li><code>none</code>：去除</li>
<li><code>hidden</code>：隐藏，不占用空间，但在表单中可能有特殊行为</li>
<li><code>dotted</code>：圆点</li>
<li><code>dashed</code>：虚线</li>
<li><code>solid</code>：实线</li>
<li><code>double</code>：双实线</li>
<li><code>groove</code>：雕刻</li>
<li><code>ridge</code>：浮雕</li>
<li><code>inset</code>：陷入</li>
<li><code>outset</code>：突出</li>
</ul>
<p>颜色就不必多说了。</p>
<p><code>border-radius</code> 属性可以改 <code>border</code> 的圆角大小。</p>
<p>MDN 样例：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0.5rem</span> outset pink;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0.5rem</span> solid khaki;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2rem</span> skyblue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">font</span>: bold <span class="number">1rem</span> sans-serif;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">outline-offset</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202403160529773.webp"
                      alt="image.png"
                ></p>
<p>需要注意的是，<code>border</code> 是有体积的，并且会随着缩放而变化，所以如果要计算宽度需要格外注意。</p>
<p>所以如果想固定盒子的实际大小的话，可以使用<strong>替代盒模型</strong>。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样盒子的实际大小完全由 <code>width</code> 和 <code>height</code> 来决定，减去 <code>padding</code> 和 <code>border</code> 即为 <code>content</code> 的大小。</p>
<p>如果想全局都使用此模型，可以这样写：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*,</span><br><span class="line">*<span class="selector-pseudo">::before</span>,</span><br><span class="line">*<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>渐变边框：</strong></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-image</span>: &lt;source&gt; &lt;slice&gt; / &lt;width&gt; / &lt;outset&gt; &lt;repeat&gt;;</span><br></pre></td></tr></table></figure></div>

<p>比较推荐的做法是盒子嵌套一下，外面整上 <code>padding</code> 模拟边框。</p>
<h2 id="Opacity"><a href="#Opacity" class="headerlink" title="Opacity"></a>Opacity</h2><p>透明度，该元素及其后代元素的透明度都会受到影响，若不想后代元素受到影响，可以通过 <code>background-color</code> 来调整背景透明度。</p>
<h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><p>与 Border 类似，但是不占用空间，属性值为 大小、颜色、样式，顺序不重要。</p>
<p><code>outline-offset</code> 用来设置元素边缘与 <code>outline</code> 之间的间隙。</p>
<h2 id="Shadow"><a href="#Shadow" class="headerlink" title="Shadow"></a>Shadow</h2><h3 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: [inset] [x-offset] [y-offset] [blur-radius] [spread-radius] [color];</span><br></pre></td></tr></table></figure></div>

<p>第一个参数为可选项，加上 <code>inset</code> 即为内阴影，不写时默认为外阴影。</p>
<h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: [x-offset] [y-offset] [blur-radius] [color];</span><br></pre></td></tr></table></figure></div>

<p>与 <code>box-shadow</code> 类似。</p>
<p><code>shadow</code> 可以重叠，用 <code>,</code> 隔开即可。</p>
<h2 id="Text-decoration"><a href="#Text-decoration" class="headerlink" title="Text-decoration"></a>Text-decoration</h2><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: [underline/overline/line-through] [color] [style] [thickness]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例：</strong></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: underline <span class="number">#ff7d31</span> solid <span class="number">3px</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><p>使一个元素浮动在容器的某个位置，行内元素可以环绕它。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">float</span>: left/right/none/inline-start/inline-end;</span><br></pre></td></tr></table></figure></div>

<h2 id="Clear"><a href="#Clear" class="headerlink" title="Clear"></a>Clear</h2><p>可用于清除浮动。</p>
<h2 id="Overflow"><a href="#Overflow" class="headerlink" title="Overflow"></a>Overflow</h2><p>处理溢出的元素。</p>
<ul>
<li><code>visible</code>：内容不被裁剪。</li>
<li><code>hidden</code>： 裁剪使其适应溢出，不支持滚动。</li>
<li><code>clip</code>：裁剪，代码层面不支持滚动。<ul>
<li><code>overflow-clip-margin</code>：裁剪范围。</li>
</ul>
</li>
<li><code>scroll</code>：总显示滚动条</li>
<li><code>auto</code>：若不溢出则不显示滚动条，否则显示。</li>
</ul>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><blockquote>
<p>改变你的网页背景</p>
</blockquote>
<p>可以通过 <code>background</code> 同时添加多个属性值，也可拆分来写。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>();</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgb</span>();</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-position</span>: center;</span><br><span class="line"><span class="attribute">background-attachment</span>: fixed;</span><br><span class="line"><span class="attribute">background-size</span>: cover;</span><br></pre></td></tr></table></figure></div>

<br>

<p><code>background-repeat</code></p>
<ul>
<li><code>repeat-x/repeat-y</code>：可以控制横向还是纵向重复，也可以使用双值分别为不同的重复样式。</li>
<li><code>repeat</code>：重复填充背景，溢出部分将裁剪。</li>
<li><code>space</code>：不会裁剪，第一个和最后一个图像会贴合边缘，使空白均匀。</li>
<li><code>round</code>：通过拉伸图像使得重复填充</li>
<li><code>no-repeat</code>：不重复。</li>
</ul>
<br>

<p><code>background-position</code></p>
<p>关键字：<code>center/top/left/bottom/right</code></p>
<p>指定为对应边界中间位置。</p>
<p>也可以采用两个值分别对应 <code>x/y</code> 坐标。</p>
<br>

<p><code>background-size</code></p>
<ul>
<li><code>length</code>：可以是一个值也可以是两个值。</li>
<li><code>percentage</code>：可以设置相对于内容和内边距的百分比。</li>
<li><code>auto</code>：自动缩放。</li>
<li><code>cover</code>：使背景覆盖。</li>
<li><code>contain</code>：使包含背景。</li>
</ul>
<h2 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h2><p>设置元素的外部显示类型。</p>
<ul>
<li><code>block</code>：块级元素。</li>
<li><code>inline</code>：内联元素，无法应用宽度&#x2F;高度属性。</li>
<li><code>inline-block</code>：内联元素，但可以应用宽度&#x2F;高度属性。</li>
<li><code>none</code>：清除该元素。</li>
<li><code>contents</code>：只显示子代元素，不显示本身。</li>
<li><code>flex</code>：弹性盒模型。</li>
<li><code>grid</code>：网格模型。</li>
</ul>
<p>此处与 <code>visibility: hidden</code> 区分，后者只会使元素不可见，但依旧占据空间。</p>
<h2 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h2><p>CSS <strong><code>position</code></strong> 属性用于指定一个元素在文档中的定位方式。<code>top</code>，<code>right</code>，<code>bottom</code> 和 <code>left</code> 属性则决定了该元素的最终位置。</p>
<p>而上面那四个位置属性可以简写为 <code>inset</code>，四个参数分别代表 <code>top</code>，<code>right</code>，<code>bottom</code>，<code>left</code>。</p>
<p>而 <code>absolute</code> 元素没有设置大小，如果四个位置都有属性，那么就会相对最近非 <code>static</code> 祖先设置大小。</p>
<ul>
<li><code>static</code>：指定元素为默认布局，无法通过其它元素改变位置。</li>
<li><code>relative</code>：相对于默认布局的位置偏移。</li>
<li><code>absolute</code>：不会为该元素预留空间，相对于最近的非 <code>static</code> 祖先的位置。</li>
<li><code>fixed</code>：不会为该元素预留空间，相对于屏幕视口的位置。</li>
<li><code>sticky</code>：到达特定位置为 <code>fixed</code> 否则为 <code>relative</code>。比如设置 <code>top: 50px</code>，当该元素到达距离视口上端 <code>50px</code> 后，相对视口不动，直到 <code>containing block</code> 脱离视口。</li>
</ul>
<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">linear-gradient(<span class="selector-attr">[angle|to &lt;side-or corner]</span>, &lt;<span class="attribute">color</span>-<span class="selector-tag">stop</span>-list&gt;)</span><br></pre></td></tr></table></figure></div>

<p>第一个参数可以是 <code>angle</code>，即 <code>[number]deg</code>，顺时针为正值，或者 <code>to</code> 加方向，如 <code>top</code>、<code>right</code> 等，代表渐变的方向。</p>
<p>而 <code>color-stop</code> 可以有多个，可以只有色值，也可以色值+长度或者百分比，代表该颜色渐变的范围&#x2F;长度，可以是单值也可以是双值，单值代表从什么地方开始，双值代表从什么地方开始和结束，前一个颜色比后一个颜色优先级更高，即不存在后对前覆盖。</p>
<p><strong>示例：</strong></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">217deg</span>, <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">8</span>), <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="number">70.71%</span>),</span><br><span class="line">            <span class="built_in">linear-gradient</span>(<span class="number">127deg</span>, <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>,.<span class="number">8</span>), <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="number">70.71%</span>),</span><br><span class="line">            <span class="built_in">linear-gradient</span>(<span class="number">336deg</span>, <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>,.<span class="number">8</span>), <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>) <span class="number">70.71%</span>);</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202405272257567.webp"
                      alt="image.png"
                ></p>
<h2 id="Z-index"><a href="#Z-index" class="headerlink" title="Z-index"></a>Z-index</h2><p><code>z-index</code> 属性用于控制元素在 Z 轴（即垂直于屏幕的轴）上的叠放顺序。当元素重叠时，<code>z-index</code> 值较大的元素会覆盖 <code>z-index</code> 值较小的元素。</p>
<p>类似于图层的概念。</p>
<h2 id="Pseudo"><a href="#Pseudo" class="headerlink" title="Pseudo"></a>Pseudo</h2><blockquote>
<p>伪类和伪元素。</p>
</blockquote>
<h3 id="Pseudo-classes"><a href="#Pseudo-classes" class="headerlink" title="Pseudo-classes"></a>Pseudo-classes</h3><ul>
<li><code>:hover</code>：鼠标悬浮</li>
<li><code>:active</code>：点击时</li>
<li><code>:visited</code>：点击后</li>
<li><code>:not()</code>：某行为的反行为</li>
</ul>
<h3 id="Pseudo-elements"><a href="#Pseudo-elements" class="headerlink" title="Pseudo-elements"></a>Pseudo-elements</h3><ul>
<li><code>::first-letter</code>：第一个字符</li>
<li><code>::first-line</code>：第一行</li>
<li><code>::selection</code>：所选择的文本</li>
<li><code>::before</code></li>
<li><code>::after</code></li>
<li><code>::marker</code></li>
</ul>
<h2 id="Text-align"><a href="#Text-align" class="headerlink" title="Text-align"></a>Text-align</h2><p>设置行内元素的水平对齐方式。</p>
<ul>
<li><code>start</code></li>
<li><code>end</code></li>
<li><code>left</code></li>
<li><code>right</code></li>
<li><code>center</code>：居中</li>
<li><code>justify</code>：向两侧对齐，对最后一行无效</li>
</ul>
<h2 id="Vertical-align"><a href="#Vertical-align" class="headerlink" title="Vertical-align"></a>Vertical-align</h2><p>设置行内元素的垂直对齐方式。</p>
<ul>
<li><code>baseline</code></li>
<li><code>top</code></li>
<li><code>middle</code></li>
<li><code>bottom</code></li>
<li><code>sub</code>：下标</li>
<li><code>super</code>：上标</li>
<li><code>text-top</code>：父元素的字体顶端</li>
<li><code>text-bottom</code>：父元素的字体底端</li>
</ul>
<h2 id="ScrollBar"><a href="#ScrollBar" class="headerlink" title="ScrollBar"></a>ScrollBar</h2><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h2><p>各个操作间用<strong>空格</strong>隔开。</p>
<h3 id="Translate"><a href="#Translate" class="headerlink" title="Translate"></a>Translate</h3><p>位移。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>([x-offset], [y-offset]);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>translate()</code></li>
<li><code>translateX()</code></li>
<li><code>translateY()</code></li>
</ul>
<h3 id="Rotate"><a href="#Rotate" class="headerlink" title="Rotate"></a>Rotate</h3><p>旋转。</p>
<p>默认为 <code>rotateZ</code></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line"><span class="comment">/* 沿着 X 轴旋转 90° */</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>rotateX()</code>：上下翻</li>
<li><code>rotateY()</code>：左右翻</li>
<li><code>rotateZ()</code>：旋转</li>
</ul>
<h3 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h3><p>缩放。</p>
<ul>
<li><code>scale()</code></li>
<li><code>scaleX()</code></li>
<li><code>scaleY()</code></li>
</ul>
<h3 id="Skew"><a href="#Skew" class="headerlink" title="Skew"></a>Skew</h3><p>倾斜（扭曲）。</p>
<ul>
<li><code>skewX()</code></li>
<li><code>skewY()</code></li>
<li><code>skew()</code></li>
</ul>
<h2 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h2><p>过渡效果。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: [property] [duration] [timing-function] [delay];</span><br></pre></td></tr></table></figure></div>

<p><strong><code>property</code></strong></p>
<p>可省略，将应用到所有可过渡的属性上。</p>
<ul>
<li><code>width</code></li>
<li><code>height</code></li>
<li><code>transform</code></li>
<li><code>color</code></li>
</ul>
<p><strong><code>timing-function</code></strong></p>
<ul>
<li><code>ease</code></li>
<li><code>linear</code></li>
<li><code>ease-in</code></li>
<li><code>ease-out</code></li>
<li><code>cubic-bezier()</code></li>
</ul>
<h2 id="Gap"><a href="#Gap" class="headerlink" title="Gap"></a>Gap</h2><p>控制 <strong>flex</strong> 和 <strong>grid</strong> 布局中元素的间距。</p>
<p>当只有一个值时，同时应用于行间距和列间距。</p>
<p>当有两个值时，第一个值用于行间距，第二个值用于列间距。</p>
<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p><strong><code>hue-rotate(deg)</code></strong></p>
<p>色相扭曲函数。</p>
<p><strong><code>blur(px)</code></strong></p>
<p>高斯模糊。</p>
<p><strong><code>brightness(%)</code></strong></p>
<p>亮度。</p>
<p><strong><code>contrast(%)</code></strong></p>
<p>对比度。</p>
<p><strong><code>grayscale(%)</code></strong></p>
<p>灰度。</p>
<p><strong><code>invert(%)</code></strong></p>
<p>反转颜色。</p>
<p><strong><code>opacity(%)</code></strong></p>
<p>透明度。</p>
<p><strong><code>saturate(%)</code></strong></p>
<p>饱和度。</p>
<h2 id="Backdrop-filter"><a href="#Backdrop-filter" class="headerlink" title="Backdrop-filter"></a>Backdrop-filter</h2><p>与 <code>filter</code> 类似，但只影响它后面的背景，不影响本身元素。</p>
<h2 id="Pointer-events"><a href="#Pointer-events" class="headerlink" title="Pointer-events"></a>Pointer-events</h2><p><code>pointer-events</code> 属性用于控制元素如何响应鼠标事件。</p>
<ul>
<li><code>none</code></li>
<li><code>auto</code></li>
</ul>
<h2 id="Cursor"><a href="#Cursor" class="headerlink" title="Cursor"></a>Cursor</h2><p><code>cursor</code> 属性用于指定当鼠标悬停在元素上时应显示的光标样式。通过设置不同的光标样式，可以为用户提供视觉反馈，表示不同的交互状态。</p>
<ul>
<li><code>default</code>：默认光标（通常是箭头）。</li>
<li><code>pointer</code>：手形光标，通常用于表示链接。</li>
<li><code>text</code>：文本输入光标，通常用于可编辑的文本区域。</li>
<li><code>move</code>：移动光标，表示元素可以被拖动。</li>
<li><code>not-allowed</code>：表示某个操作被禁止的光标。</li>
<li><code>crosshair</code>：十字光标。</li>
<li><code>help</code>：帮助光标，通常用于表示有更多信息可用。</li>
<li><code>wait</code>：等待光标，表示操作正在进行中。</li>
<li>自定义光标：可以使用 URL 指定一个自定义光标图像。</li>
</ul>
<h2 id="List-style"><a href="#List-style" class="headerlink" title="List-style"></a>List-style</h2><p><code>list-style</code> 属性是一个简写属性，用于同时设置列表项标记的类型、位置和图像。</p>
<p><code>list-style-type</code></p>
<ul>
<li><code>none</code>：无标记。</li>
<li><code>disc</code>：实心圆（默认值）。</li>
<li><code>circle</code>：空心圆。</li>
<li><code>square</code>：实心方块。</li>
<li><code>decimal</code>：数字（1, 2, 3, …）。</li>
<li><code>decimal-leading-zero</code>：前导零数字（01, 02, 03, …）。</li>
<li><code>lower-roman</code>：小写罗马数字（i, ii, iii, …）。</li>
<li><code>upper-roman</code>：大写罗马数字（I, II, III, …）。</li>
<li><code>lower-alpha</code>：小写字母（a, b, c, …）。</li>
<li><code>upper-alpha</code>：大写字母（A, B, C, …）。</li>
</ul>
<h2 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/index07.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Pagination<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Dolores pariatur repellat illum, reprehenderit quidem ab expedita, dicta debitis animi velit laborum molestias. Qui assumenda porro praesentium. Corporis molestiae necessitatibus incidunt.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;apple&quot;</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>orange<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;banana&quot;</span>&gt;</span>banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is page #1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Blanditiis voluptatum nesciunt, facilis commodi id fuga iusto. Delectus, quis labore assumenda enim, aspernatur eaque accusantium eum ullam, recusandae quaerat vel veniam?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 向左向右只能手动为每一页填写它对应的上一页和下一页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index07.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index00.html&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index01.html&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index02.html&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index03.html&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index04.html&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index05.html&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index06.html&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">233</span>, <span class="number">106</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">background-color</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #fruit li::before &#123;</span></span><br><span class="line"><span class="comment">  content: &quot;✅&quot;;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="selector-id">#apple</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;🍎&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#orange</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;🍊&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#banana</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;🍌&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#fruit</span> <span class="selector-tag">li</span><span class="selector-pseudo">::marker</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;√&quot;</span>;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pagination</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pagination</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pagination</span> <span class="selector-tag">a</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">124</span>, <span class="number">255</span>, <span class="number">124</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pagination</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0.561</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Dropdown"><a href="#Dropdown" class="headerlink" title="Dropdown"></a>Dropdown</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/index08.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Food<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Orange<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. A corrupti sed consequatur. Eius consectetur sunt error, aliquid nihil ipsum a ut explicabo placeat perspiciatis quisquam in maxime eaque, quos facilis?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dropdown</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dropdown</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">80%</span>);</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dropdown</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dropdown</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">95%</span>);</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">0%</span>, <span class="number">0.77</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dropdown</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dropdown</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0.487</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dropdown</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">172</span>, <span class="number">255</span>, <span class="number">47</span>, <span class="number">0.598</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Navigation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/index09.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Falling Sakura<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Products<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is the Home page<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Doloribus aliquid at provident ad, quidem consequuntur expedita a necessitatibus. Dolor aut praesentium laudantium voluptate laborum delectus illum, perferendis tempore ut? Repellendus!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.navbar</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="comment">/* 去除圆点 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">50%</span>, <span class="number">0.356</span>);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.navbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.navbar</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">50%</span>, <span class="number">0.556</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.navbar</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">243</span>, <span class="number">80</span>, <span class="number">0.428</span>);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h1><h2 id="普通文档流"><a href="#普通文档流" class="headerlink" title="普通文档流"></a>普通文档流</h2><p>所有元素按照先后位置从上到下布局。</p>
<p>行内元素占满一行后换行，块级元素被渲染为一个单独的行。</p>
<p>这是所有元素的默认定位。</p>
<h2 id="语义标签"><a href="#语义标签" class="headerlink" title="语义标签"></a>语义标签</h2><ul>
<li><code>header</code></li>
<li><code>nav</code></li>
<li><code>main</code><ul>
<li><code>section</code></li>
<li><code>aside</code></li>
<li><code>artible</code></li>
</ul>
</li>
<li><code>footer</code></li>
</ul>
<h2 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h2><blockquote>
<p>弹性盒模型。</p>
</blockquote>
<ul>
<li><code>flex-direction</code>：<ul>
<li>将会改变主轴和交叉轴的方向，默认 <code>row</code> 是水平方向上是主轴，竖直方向上是交叉轴。</li>
<li><code>row/row-reverse/column/column-reverse</code></li>
</ul>
</li>
<li><code>flex-wrap</code>：<ul>
<li><code>no-wrap</code>：所有子元素显示在一行。</li>
<li><code>wrap</code>：自动换行排列。</li>
<li><code>wrap-reverse</code></li>
</ul>
</li>
<li><code>justify-content</code>：<ul>
<li><code>flex-start</code>：左对齐。</li>
<li><code>flex-end</code>：右对齐。</li>
<li><code>center</code>：沿主轴居中。</li>
<li><code>space-between</code>：间隙平分。</li>
<li><code>space-around</code>：每个子元素周围都有相同的间隙，即子元素之间的间隙为子元素到边框的间隙的二倍。</li>
<li><code>space-evenly</code>：子元素之间和边框到子元素之间的间隙相同。</li>
</ul>
</li>
<li><code>align-items</code>：<ul>
<li><code>flex-start</code>：上对齐。</li>
<li><code>flex-end</code>：下对齐。</li>
<li><code>center</code>：沿交叉轴居中。</li>
<li><code>stretch</code>：若元素未设置高度，将占满高度。</li>
<li><code>baseline</code>：基于元素的第一行文字的基线对齐。</li>
</ul>
</li>
<li><code>align-self</code>：控制单独子元素的对齐方式。</li>
<li><code>flex</code><ul>
<li><code>flex-grow</code>：元素的放大比例，默认为 0</li>
<li><code>flex-shrink</code>：元素的缩小比例，默认为 1</li>
<li><code>flex-basis</code>：元素在主轴方向的初始大小。</li>
</ul>
</li>
</ul>
<p>为什么没有 <code>justify-items</code> 属性，什么时候可以使用 <code>align-content</code> ？</p>
<p>因为 flex 布局在主轴方向上就是一个块啊，它在主轴方向上没有多个 <code>item</code> 所以它其实就是沿着交叉轴方向的一个一维的直线（默认 <code>flex-wrap</code> 属性值为 <code>nowrap</code>，那它实际上就是一个点，只有当它有多行内容时 <code>align-content</code> 才有意义。</p>
<p><code>align-content</code> 和 <code>justify-content</code> 是控制<strong>多行</strong>内容的对齐方式。</p>
<p>注意，当你将 <code>flex-wrap</code> 设置为 <code>wrap</code> 后，即使容器内的元素不足以换行，但还是会被识别为“多行内容”，此时 <code>align-content</code> 会生效。</p>
<p><code>align-items</code> 和 <code>justify-items</code> 是控制<strong>单行</strong>内容的对齐方式。</p>
<h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><p>网格布局。</p>
<ul>
<li><code>grid-template-rows</code>：行轨道的尺寸。</li>
<li><code>grid-template-columns</code>：列分别的宽度，可以是固定的宽度，也可以用 <code>fr</code> 表示浮动宽度（特有单位），可以使用重复函数节省编码时间：<code>repeat(3, 1fr)</code> 。</li>
<li><code>column-gap</code>：列间距。</li>
<li><code>row-gap</code>：行间距。</li>
<li><code>gap</code>：间距。</li>
<li><code>grid-template-areas</code>：排列元素。<ul>
<li>示例：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/FallingSakura/Source@main/img/202406182023359.webp"
                      alt="image.png"
                ></li>
<li>然后给子元素分别设置 <code>grid-area</code> 为 <code>header</code>&#x2F;<code>content</code>&#x2F;<code>sidebar</code>&#x2F;<code>footer</code> 即可。</li>
</ul>
</li>
<li><code>align-items</code>：交叉轴方向上对齐。</li>
<li><code>justify-items</code>：主轴方向上对齐。</li>
</ul>
<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><blockquote>
<p>Block Format Context<br>块格式化上下文</p>
</blockquote>
<p>可以看作是元素的一个属性，当它拥有这个属性时，可以看作是独立的一个容器，容器里的元素不会影响到外面的元素，它计算高度时会把浮动元素的高度也计算进来，且浮动元素与 BFC 元素区域不会叠加。</p>
<p>如何开启？</p>
<ol>
<li>根元素 <code>&lt;html&gt;</code></li>
<li>浮动元素（<code>float</code> 不为 <code>none</code>）</li>
<li>绝对定位元素（<code>position</code> 为 <code>absolute</code> 或 <code>fixed</code>）</li>
<li><code>display</code> 值为 <code>inline-block</code>, <code>table-cell</code>, <code>table-caption</code>, <code>table</code>, <code>table-row</code>, <code>table-row-group</code>, <code>table-header-group</code>, <code>table-footer-group</code>, <code>inline-table</code>, <code>flow-root</code>, <code>flex</code>, <code>inline-flex</code>, <code>grid</code>, <code>inline-grid</code>, <code>inline-block</code></li>
<li><code>overflow</code> 值不为 <code>visible</code> 的块元素</li>
<li><code>contain</code> 值为 <code>layout</code>, <code>content</code>, <code>paint</code> 的元素</li>
<li>多列容器</li>
</ol>
<p>可以避免间距重叠，清除浮动带来的父元素高度塌陷（父元素是由子元素所撑开的，当子元素浮动后脱离文档流父元素便没有高度），避免浮动覆盖。</p>
<h1 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h1><blockquote>
<p>keyframes<br>关键帧动画</p>
</blockquote>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> [name] &#123;</span><br><span class="line">	<span class="selector-attr">[percentage]</span> &#123;</span><br><span class="line">		<span class="selector-attr">[animation]</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>from</code> 与 <code>0%</code> 等价，<code>to</code> 与 <code>100%</code> 等价。</p>
<p>代表关键帧动画中的一个节点。</p>
<p>然后进行一些操作就可以了。</p>
<p>给元素应用动画：</p>
<ul>
<li><code>animation-name</code>：名字</li>
<li><code>animation-duration</code>：持续时间</li>
<li><code>animation-iteration-count</code>：迭代次数</li>
<li><code>animation-direction</code>：动画时间方向<ul>
<li><code>normal</code></li>
<li><code>reverse</code></li>
<li><code>alternate</code></li>
<li><code>alternate-reverse</code></li>
</ul>
</li>
<li><code>animation-play-state</code>：播放状态<ul>
<li><code>paused</code></li>
<li><code>running</code></li>
</ul>
</li>
<li><code>animation-timing-function</code>：时间函数曲线可以通过 <code>F12</code> 调节对应曲线得到相应参数<ul>
<li><code>ease-in-out</code>(default)</li>
<li><code>linear</code></li>
<li><code>steps([number])</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++/C# Note</title>
    <url>/edeb27c6.html</url>
    <content><![CDATA[<blockquote>
<p>三种语言的相似之处有很多，先后学了 <code>c++</code> <code>c</code> <code>c#</code>，把一些之前不知道的东西记录一下，写过很多遍的就不整理了。</p>
</blockquote>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><blockquote>
<p>c++&#x2F;c#</p>
</blockquote>
<p>枚举 <code>enum</code> 是一种用户定义的类型，它由一组命名的整数常量组成。枚举类型的主要目的是提高代码的可读性和可维护性，特别是在处理一组相关的常量时。</p>
<p><strong>示例</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">eDirection</span> &#123; STOP = <span class="number">0</span>, LEFT, RIGHT, UP, DOWN &#125;;</span><br><span class="line">eDirection dir;</span><br></pre></td></tr></table></figure></div>

<p>这里就定义了一个枚举类型 <code>eDirection</code>，和这个类型的一个变量 <code>dir</code>，它只可以取其中这些常量的值。</p>
<p>里面的值可以设定，默认是递增的。</p>
<p>访问即 <code>dir.LEFT</code>，这样可以使代码更直观</p>
<h1 id="库"><a href="#库" class="headerlink" title="库"></a>库</h1><h2 id="conio-h"><a href="#conio-h" class="headerlink" title="conio.h"></a>conio.h</h2><blockquote>
<p>c++</p>
</blockquote>
<p><strong><code>_kbhit()</code></strong></p>
<p>如果有键盘输入，则返回 1.</p>
<p>否则返回 0.</p>
<p>它是非阻塞的，这点与 <code>_getch()</code> 不同。</p>
<p><strong><code>_getch()</code></strong></p>
<p>从控制台中读取单个字符，不需要回车键。</p>
<p>且读取的字符不会在控制台中显示。</p>
<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><blockquote>
<p>c#</p>
</blockquote>
<h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>关键字 <code>static</code>。</p>
<p>每一个 <code>class</code> 都有它的变量、函数等。</p>
<p><strong>对象</strong>是<strong>类</strong>的<strong>实例</strong>。</p>
<p>如果是 <code>static</code> 类型的变量，那么无需为这个 <code>class</code> 实例化（即创建一个对象）便可以修改它的值。</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Cs"><figure class="iseeu highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Myclass</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="built_in">int</span> staticNum;</span><br><span class="line">	<span class="built_in">int</span> num;</span><br><span class="line">&#125;</span><br><span class="line">Myclass myclass = <span class="keyword">new</span> Myclass();</span><br><span class="line">myclass.num = <span class="number">6</span>;</span><br><span class="line">Myclass.staticNum = <span class="number">6</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><ul>
<li><code>public</code></li>
</ul>
<p>修饰类时，代表它可以被任何文件的任何代码访问。</p>
<p>修饰成员时，表示这个对象可以在任何位置被访问。</p>
<ul>
<li><code>private</code></li>
</ul>
<p>只能修饰成员，表示这个变量只可以在对象内部被访问。</p>
<ul>
<li><code>internal</code></li>
</ul>
<p>类或成员只能被一个程序集中的代码访问，类的默认修饰符。</p>
<ul>
<li><code>protected</code></li>
</ul>
<p>子类可以访问，而外部不可访问。</p>
<h2 id="Class-与-Struct"><a href="#Class-与-Struct" class="headerlink" title="Class 与 Struct"></a>Class 与 Struct</h2><p>它们的区别在何处？</p>
<p><code>class</code> 变量储存的是地址，而 <code>sruct</code> 变量储存的是值。</p>
<p>也就是说，如果将一个 <code>class</code> 赋值给另一个 <code>class</code>，那么这两个 <code>class</code> 所指向的是相同的变量。</p>
<p>而如果把一个 <code>struct</code> 赋值给另一个 <code>struct</code>，那么这两个 <code>struct</code> 是两个值相同的不同的变量。</p>
<p>同样，当 <code>class</code> 作为形参传入一个函数时，它的值会受到函数内修改的影响，因为访问的都是同一个地址。</p>
<p>而 <code>struct</code> 作为值只是复制了一份传入函数，函数内修改的是复制体，并不会影响到外面的值。</p>
<p>对 <code>struct</code> 使用 <code>ref</code> 关键字，即取地址，即可实现和 <code>class</code> 一样的效果。</p>
<hr>
<p><code>struct</code> 不能继承 <code>struct</code> 或者 <code>class</code>，无法被继承，只能继承接口。</p>
<p><code>class</code> 可以继承一个父类，也可以继承接口。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><code>public class A : B</code> 表示类 A 继承类B，A 是子类，B 是父类，子类可以使用父类中的变量。</p>
<p>而如果子类中某个函数不想使用父类中的函数，可以采用 <code>override</code> 关键字重新定义这个函数。</p>
<div class="highlight-container" data-rel="Cs"><figure class="iseeu highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">fn</span>()</span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>同时需要在父类的这个函数中添加 <code>virtual</code> 关键字表示这个函数允许被重写。</p>
<div class="highlight-container" data-rel="Cs"><figure class="iseeu highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fn</span>()</span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要注意，父类变量可以存储子类变量的值，但子类变量不可以存储父类变量的值。</p>
<p>所有类型的基类是 <code>object</code>。</p>
<h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><p>在类前加上此关键字可以在各个文件中写这个类，并且它们最终会合并在一起。</p>
<div class="highlight-container" data-rel="Cs"><figure class="iseeu highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">p</span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>在类前加上 <code>interface</code> 便可以作为一个接口。</p>
<p>接口内定义若干方法，而不定义它们的实现，且不能添加访问修饰符，默认 <code>public</code>。</p>
<p>接口只提供声明，不提供实现。</p>
<p>所以继承接口后需要给出它相应的实现。</p>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>添加 <code>abstract</code> 的类无法被实例化，并且可以暂时不实现接口。</p>
<p><code>abstract</code> 也可以修饰函数，只声明不实现，留给子类实现。</p>
<p>抽象类中可以实现接口。</p>
<p>类只能继承一个抽象类。</p>
<p>抽象类也可以自己声明函数、属性并实现。</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><div class="highlight-container" data-rel="Cs"><figure class="iseeu highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GV</span>&lt;<span class="title">T</span>&gt; &#123;</span><br><span class="line">	<span class="keyword">public</span> T x;</span><br><span class="line">	<span class="keyword">public</span> T y;</span><br><span class="line">&#125;</span><br><span class="line">GV&lt;<span class="built_in">int</span>&gt; giv = <span class="keyword">new</span> GV&lt;<span class="built_in">int</span>&gt;();</span><br></pre></td></tr></table></figure></div>

<p>这样就可以实现同一份代码的不同类型。</p>
<p>泛型方法：</p>
<div class="highlight-container" data-rel="Cs"><figure class="iseeu highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attack</span>&lt;<span class="title">T</span>&gt;(<span class="params">T a, T b</span>) <span class="keyword">where</span> T : Actor</span>&#123;</span><br><span class="line">	a.Attack();</span><br><span class="line">	b.Attack();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要说明这个泛型继承自哪个类，否则默认就是 <code>object</code>。</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>使用 <code>delegate</code> 声明一个类型，它可以储存多个相同形式的函数并依次执行，通过 <code>+=</code> 和 <code>-=</code> 控制里面的函数。</p>
<p>包括这个函数的类型，形参等。</p>
<div class="highlight-container" data-rel="Cs"><figure class="iseeu highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">float</span> <span class="title">CalcFn</span>(<span class="params"><span class="built_in">float</span> v1, <span class="built_in">float</span> v2</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">float</span> <span class="title">Add</span>(<span class="params"><span class="built_in">float</span> a, <span class="built_in">float</span> b</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">float</span> <span class="title">Mul</span>(<span class="params"><span class="built_in">float</span> a, <span class="built_in">float</span> b</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CalcFn p = Add;</span><br><span class="line">p(<span class="number">1f</span>, <span class="number">2f</span>);</span><br><span class="line">p += Mul;</span><br><span class="line">p(<span class="number">1f</span>, <span class="number">2f</span>);</span><br></pre></td></tr></table></figure></div>

<p>相当于一个函数集合。</p>
<p><code>Func&lt;T1, T2, TResult&gt;</code> 表示一个委托类型，前面几个是输入参数的类型，最后一个是返回值的类型。</p>
<p><code>Action&lt;T1, T2&gt;</code> 是无返回值</p>
]]></content>
      <categories>
        <category>Back-End</category>
      </categories>
      <tags>
        <tag>c season</tag>
      </tags>
  </entry>
  <entry>
    <title>ChatGPT：开启个人成长的新纪元</title>
    <url>/5a99080f.html</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small pink icon-padding">
    <i class="note-icon fa-solid fa-lightbulb"></i><p>本文标题及封面均使用 ChatGPT 生成。</p>

  </div>

<h1 id="ChatGPT-与个人能力"><a href="#ChatGPT-与个人能力" class="headerlink" title="ChatGPT 与个人能力"></a>ChatGPT 与个人能力</h1><blockquote>
<p>视频原地址：<a class="link"   href="https://www.bilibili.com/video/BV1th4y137yh/" >ChatGPT 是少数强者的【外挂】｜ChatGPT使用教程_哔哩哔哩_bilibili<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h2 id="快速学习"><a href="#快速学习" class="headerlink" title="快速学习"></a>快速学习</h2><blockquote>
<p>你想做的事情，99.99% 别人都做过，而且做的比你好，你只需要搜到它，然后改良它。</p>
</blockquote>
<p>SECI 模型，即显性知识和隐形知识之间的相互转化。</p>
<p>社会化、外在化、联结化、内在化。</p>
<p>这里写一条我自己的感悟：只有显性知识才是能作为笔记的，隐形知识需要你上手去做。</p>
<p><strong>搜索力</strong></p>
<p>常用为 Bilibili，Google，Youtube，ChatGPT，sci-hub.</p>
<p>并且 ChatGPT 可以把一个知识以 SECI 的三个阶段和学习力的三个层次有针对性地展开为你讲解，这是一般搜索引擎做不到的。</p>
<p>强者的<strong>五大核心竞争力</strong>（使用工具的能力）。</p>
<ul>
<li>快速学习的能力（三个层次：有人手把手教，自己从书上学，探索未知）</li>
<li>提问能力（高质量问题）</li>
<li>批判性思考（苏格拉底提问）</li>
<li>结构化思考（构建模型）</li>
<li>创新（延续性创新）</li>
</ul>
<p>而想使用好 ChatGPT 这个工具，最需要的就是提问能力。</p>
<h2 id="提问能力"><a href="#提问能力" class="headerlink" title="提问能力"></a>提问能力</h2><blockquote>
<p>最重要、最艰难的工作，从来不是找到对的答案，而是问出正确的问题。——彼得</p>
</blockquote>
<p><strong>我不擅长提问。</strong></p>
<p>这里有一个<strong>布鲁姆教育目标分类模型</strong>，可以基于此进行提问。</p>
<p>利用 Chat GPT 训练你的提问能力。</p>
<p>你也可以向它提问如何更好地利用它，如何向它提问。</p>
<p>你的问题质量越高、描述的越清楚、越详细，你得到的它的答案也就越详细越准确，越能得到你想要的信息。</p>
<p>问题之间可以组合，但数量不宜过多。（因为它有字数限制）</p>
<h2 id="批判性思考"><a href="#批判性思考" class="headerlink" title="批判性思考"></a>批判性思考</h2><blockquote>
<p><strong>批判性思考本质上是思考观点背后的思考过程</strong></p>
</blockquote>
<p>任何<em>观点</em>，都是针对某个<em>论题</em>，基于特定的<em>概念</em>、<em>证据事实</em>和<em>假设</em>，站在特定的<em>立场</em>，进行<em>推理和解释</em>，从而支持某个<em>结论</em>。</p>
<p>包括观点、论题、证据事实、结论、推理理解的过程、假设、概念、立场。</p>
<p>可以问它观点的各个论证部分，也可以让它针对各个论证部分进行批判。</p>
<p>最简单的批判方式就是批判概念。</p>
<ul>
<li><strong>苏格拉底提问方法</strong></li>
<li><strong>基于结构化分析问题&#x2F;创新的目的，让它为你提供一些批判句式</strong></li>
<li><strong>结合论证谬误提问</strong></li>
</ul>
<p>这些就不详细展开了（可以问 GPT）。</p>
<h2 id="结构化思考"><a href="#结构化思考" class="headerlink" title="结构化思考"></a>结构化思考</h2><p>学会 MECE 的分类方法（相互独立且完全穷尽）。</p>
<p>把隐性的知识显性化。</p>
<p>让⌈它⌋给你推荐不同结构的模型，并且教给你这些模型具体该怎么使用，有哪些局限，具体的例子有哪些，分析这个模型的应用场景和它的结构，并根据你的需求推荐相应的模型。</p>
<h2 id="创新"><a href="#创新" class="headerlink" title="创新"></a>创新</h2><p><em>颠覆性创新&#x2F;延续性创新</em></p>
<p>需要了解创新者的五个工具。</p>
<p>对于一个问题，你可以让 ChatGPT 基于一个特定的思考结构进行发散。</p>
<p>比如：让它扮演不同角色的人，站在不同的立场对一个问题进行讨论。</p>
<p>比如：基于某种背景，让它预测未来的发展趋势。</p>
<p>比如：给它一些需求，问它有没有好的解决办法。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>快速学习显性知识，通过提出高质量问题内化成自己批判性思考的能力、结构化思考能力，最终实现创新。</p>
<h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><p>以下是⌈它们⌋针对我“请介绍一下你自己的功能以及我该如何使用。”的问题作出的回答。</p>
<h2 id="WebPilot"><a href="#WebPilot" class="headerlink" title="WebPilot"></a>WebPilot</h2><p>你好，WebPilot 是一个强大的 ChatGPT 插件，专为增强您的在线浏览体验而设计。以下是 WebPilot 插件的详细功能以及使用方法：</p>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><ol>
<li><p><strong>网页内容总结</strong></p>
<ul>
<li>输入一个网页 URL，WebPilot 将提取网页内容并返回简明扼要的总结，帮助您快速了解网页的主要内容。</li>
</ul>
</li>
<li><p><strong>视频内容总结</strong></p>
<ul>
<li>输入一个 YouTube 视频的 URL，WebPilot 将分析视频内容并提供详细的总结，确保您无需观看完整视频即可掌握核心信息。</li>
</ul>
</li>
<li><p><strong>信息搜索和翻译</strong></p>
<ul>
<li>输入您的查询，WebPilot 将使用您设定的语言进行搜索，并返回相关信息。支持将查询转换为不同语言并提供多种资源链接。</li>
</ul>
</li>
</ol>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol>
<li><p><strong>网页内容总结</strong></p>
<ul>
<li>直接输入您要浏览的网页 URL。</li>
<li>WebPilot 将分析该网页，并以项目符号的形式呈现关键点，最后提供一个主要结论。</li>
</ul>
</li>
<li><p><strong>视频内容总结</strong></p>
<ul>
<li>直接输入 YouTube 视频的 URL。</li>
<li>WebPilot 将总结视频的主要内容，列出详细的要点，并提供一个关键结论。</li>
</ul>
</li>
<li><p><strong>信息搜索</strong></p>
<ul>
<li>提出您的查询问题，如“法国最好的餐厅在哪里？”。</li>
<li>WebPilot 将搜索相关信息并以设定语言返回结果，同时提供多个资源链接供参考。</li>
</ul>
</li>
</ol>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p><strong>网页总结</strong></p>
<ul>
<li>输入：“<a class="link"   href="https://example.com”/" >https://example.com”<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>返回：该网页的关键点总结和主要结论。</li>
</ul>
</li>
<li><p><strong>视频总结</strong></p>
<ul>
<li>输入：“<a class="link"   href="https://www.youtube.com/watch?v=example%E2%80%9D" >https://www.youtube.com/watch?v=example”<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>返回：该视频的详细要点总结和主要结论。</li>
</ul>
</li>
<li><p><strong>信息搜索</strong></p>
<ul>
<li>输入：“巴黎最佳景点？”</li>
<li>返回：有关巴黎最佳景点的多种资源链接和总结信息。</li>
</ul>
</li>
</ul>
<h2 id="Code-Copilot"><a href="#Code-Copilot" class="headerlink" title="Code Copilot"></a>Code Copilot</h2><p>我是 Code Copilot，您的编程助手，旨在帮助您完成各种编程任务。以下是我的功能和使用指南：</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li><strong>代码编写</strong>：编写高效、可读、清晰且可维护的代码。</li>
<li><strong>代码调试</strong>：分析和修复代码中的错误。</li>
<li><strong>代码解释</strong>：逐步解释代码的工作原理。</li>
<li><strong>代码审查</strong>：检查代码的功能，确保其无错误，并提供改进建议。</li>
<li><strong>API 文档阅读</strong>：帮助解析和理解 API 文档。</li>
<li><strong>实时搜索</strong>：执行实时搜索以检索最新数据或信息。</li>
<li><strong>单元测试编写</strong>：编写单元测试以验证代码的功能。</li>
</ol>
<h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><ol>
<li><strong>指定语言</strong>：使用命令<code>/start(language?: string)</code>指定或输入您要使用的编程语言。</li>
<li><strong>代码编写与调试</strong>：<ul>
<li>粘贴您的代码、文档或描述具体的编码问题。</li>
<li>使用命令<code>/quick_fix(any: string)</code>进行快速修复。</li>
<li>使用命令<code>/fix(any: string)</code>进行详细的调试。</li>
</ul>
</li>
<li><strong>代码解释与审查</strong>：<ul>
<li>使用命令<code>/explain(any: string)</code>逐步解释代码。</li>
<li>使用命令<code>/review(any: string)</code>审查代码并提供改进建议。</li>
</ul>
</li>
<li><strong>API 文档阅读</strong>：提供 API 文档的链接，我将帮助解析和理解。<ul>
<li>使用命令<code>/read(urls: string[])</code>读取网页内容。</li>
</ul>
</li>
<li><strong>实时搜索</strong>：使用命令<code>/search(any: string)</code>执行实时搜索以检索最新信息。</li>
</ol>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol>
<li><strong>粘贴代码或文档</strong>：提供您当前的代码片段、文档或描述您遇到的问题。</li>
<li><strong>选择合适的命令</strong>：根据您的需求选择上述命令之一。</li>
<li><strong>获得帮助</strong>：查看我的响应，获取解决方案或进一步指导。</li>
</ol>
<h2 id="Code-Tutor"><a href="#Code-Tutor" class="headerlink" title="Code Tutor"></a>Code Tutor</h2><p>你好！我是一个名为Khanmigo Lite的AI学习助手，由Khan Academy与OpenAI合作开发，旨在帮助你学习编程和计算机科学。我可以帮助你理解编程概念，解决代码中的问题，以及指导你如何改进你的编程技能。</p>
<p>你可以这样使用我：</p>
<ol>
<li><strong>代码问题</strong>：如果你在编写代码时遇到了问题，可以把代码粘贴过来，告诉我你卡在哪个部分。我会帮助你找到问题并指导你如何解决。</li>
<li><strong>概念理解</strong>：如果你对某个编程概念不太理解，可以向我提问，我会帮助你理清思路。</li>
<li><strong>算法设计</strong>：如果你需要设计一个算法或解决一个特定的问题，可以告诉我你的想法，我会引导你一步步完成。</li>
</ol>
<p>为了更好地帮助你，请把你的代码或问题详细描述一下，并告诉我你目前遇到的困难。我会根据你的描述，提供指导和建议。你准备好开始了吗？可以先上传你的作业或代码，让我们看看你正在处理什么问题。</p>
<h2 id="Scholar-GPT"><a href="#Scholar-GPT" class="headerlink" title="Scholar GPT"></a>Scholar GPT</h2><p>你好！我是Scholar GPT，你的多功能研究助手。我可以帮助你进行数据分析、学术研究、数学问题求解以及在线信息检索。以下是我的一些主要功能和使用方法：</p>
<h3 id="1-数据分析与可视化"><a href="#1-数据分析与可视化" class="headerlink" title="1. 数据分析与可视化"></a>1. 数据分析与可视化</h3><p>我可以使用Python库（如Pandas、Matplotlib等）进行数据分析和可视化。如果你有数据集需要分析，可以将数据上传给我，我可以为你生成图表和统计报告。</p>
<h3 id="2-学术研究"><a href="#2-学术研究" class="headerlink" title="2. 学术研究"></a>2. 学术研究</h3><p>我可以搜索和获取学术论文和研究文章的信息。你可以提供具体的研究主题或关键词，我会为你找到相关的学术资源，并提供引用和链接。</p>
<h3 id="3-专利检索"><a href="#3-专利检索" class="headerlink" title="3. 专利检索"></a>3. 专利检索</h3><p>我可以帮助你检索专利信息。只需提供关键词和其他过滤条件（如国家、时间范围），我会找到相关的专利并提供详细信息。</p>
<h3 id="4-数学问题求解"><a href="#4-数学问题求解" class="headerlink" title="4. 数学问题求解"></a>4. 数学问题求解</h3><p>我可以解决复杂的数学问题，包括符号运算和数值计算。如果你有特定的数学问题，请描述问题的详细内容，我会为你提供解答步骤和结果。</p>
<h3 id="5-网页数据处理"><a href="#5-网页数据处理" class="headerlink" title="5. 网页数据处理"></a>5. 网页数据处理</h3><p>我可以从网页上提取和处理数据。如果你有特定的网址需要分析，可以提供链接，我会从中提取有用的信息。</p>
<h3 id="6-自然语言处理"><a href="#6-自然语言处理" class="headerlink" title="6. 自然语言处理"></a>6. 自然语言处理</h3><p>我可以进行文本分析和情感分析等自然语言处理任务。如果你有文本需要分析，例如情感倾向分析或关键词提取，可以将文本提供给我。</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><ol>
<li><strong>数据分析</strong>：上传一个CSV文件，并告诉我你希望分析的内容。</li>
<li><strong>学术研究</strong>：告诉我你感兴趣的研究主题，例如“机器学习在医学中的应用”，我会为你找到相关的学术文章。</li>
<li><strong>专利检索</strong>：提供关键词和过滤条件，例如“人工智能专利在美国”，我会为你检索相关专利。</li>
<li><strong>数学问题</strong>：描述你的数学问题，例如“求解微分方程y’’ + y &#x3D; 0”，我会为你提供解答。</li>
</ol>
<h2 id="Write-For-Me"><a href="#Write-For-Me" class="headerlink" title="Write For Me"></a>Write For Me</h2><p>当然！我是一个专门为内容创作和优化设计的聊天机器人，具备以下功能：</p>
<ol>
<li><p><strong>理解用户需求</strong>：</p>
<ul>
<li>我会询问你的具体需求，包括使用目的、目标受众、语气、字数、风格和内容格式等，以确保我能提供最合适的内容。</li>
</ul>
</li>
<li><p><strong>创建内容大纲</strong>：</p>
<ul>
<li>根据你的要求，我首先会创建详细的大纲，将内容分成不同部分，并对每个部分进行总结，分配字数。</li>
</ul>
</li>
<li><p><strong>字数管理</strong>：</p>
<ul>
<li>我在写作过程中会时刻跟踪字数，确保符合你的要求，并在各部分之间进行平滑过渡。</li>
</ul>
</li>
<li><p><strong>创意扩展</strong>：</p>
<ul>
<li>我会使用各种策略来丰富内容，例如扩展讨论、加入要点和有趣的事实，同时保持内容的相关性和质量。</li>
</ul>
</li>
<li><p><strong>分段写作和交付</strong>：</p>
<ul>
<li>我会按部分逐步写作和交付内容，随时向你更新进度，并计划下一部分的内容。</li>
</ul>
</li>
<li><p><strong>内容质量</strong>：</p>
<ul>
<li>我会整合SEO策略，确保内容具有吸引力，适合目标受众和发布平台。</li>
</ul>
</li>
<li><p><strong>内容格式</strong>：</p>
<ul>
<li>默认格式为markdown，但我可以根据你的需求调整为任何格式。</li>
</ul>
</li>
<li><p><strong>延伸互动</strong>：</p>
<ul>
<li>对于复杂话题或长篇内容，我会提前告知需要多次回复，以确保整个内容的连贯性。</li>
</ul>
</li>
<li><p><strong>问题解决</strong>：</p>
<ul>
<li>我会以解决问题的心态来处理任务，旨在满足你的具体需求和挑战。</li>
</ul>
</li>
</ol>
<p>这些功能旨在为你提供高质量、定制化的内容创作服务。如果你有任何具体需求或问题，请随时告诉我！</p>
<h2 id="Translate-GPT"><a href="#Translate-GPT" class="headerlink" title="Translate GPT"></a>Translate GPT</h2><p>这个没什么好说的。</p>
<h2 id="Image-Generator"><a href="#Image-Generator" class="headerlink" title="Image Generator"></a>Image Generator</h2><p>这是用它生成的一张科幻风格的宇宙插画。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202405212116475.webp"
                      alt="DALL·E 2024-05-21 21.15.12 - A detailed sci-fi style illustration of the universe. The scene includes a vast expanse of space filled with colorful nebulae, distant galaxies, and b.webp"
                ></p>
<p>还是很不错的。</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>我们通过各种插件，能够使用 ChatGPT 联网了解到最新的信息，为不同领域的人提供垂直信息，增强了信息的准确度和专业性，查找论文、文档，总结视频等等。</p>
<p>还有艺术创新类的工作，比如生成图片&#x2F;视频&#x2F;图标，这些都大大提高了我们的工作效率。</p>
<p>我初次对 GPT-4 进行较为深入的体验，之前一直用的是 Bing 的 3.5 模型，感觉也不过如此，但现在确实被 GPT-4 的强大功能所震撼到。它能够节省很多我们在查找筛选整合信息的时间，通过它能锻炼我们提问、思考、内化的能力，未来，会使用工具是一个必不可少的能力。</p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>chatgpt</tag>
      </tags>
  </entry>
  <entry>
    <title>DataBase_Note</title>
    <url>/2c7dde30.html</url>
    <content><![CDATA[<p>数据库是一种组织、存储和管理数据的系统。它允许用户以结构化的方式存储和检索数据，通常通过数据库管理系统（DBMS）进行操作。</p>
<h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><ol>
<li><strong>关系型数据库</strong>：如 MySQL、PostgreSQL、Oracle。使用<strong>表格</strong>来组织数据，通过 SQL 进行操作（这么说 Excel 也可以是一种数据库）。</li>
<li><strong>非关系型数据库（NoSQL）</strong>：如 MongoDB、Cassandra。用于处理大规模和非结构化数据，灵活性更高。</li>
<li><strong>内存数据库</strong>：如 Redis、Memcached。用于需要高速读写的数据，数据存储在内存中。</li>
</ol>
<table>
<thead>
<tr>
<th>概念</th>
<th>关系型数据库（如MySQL）</th>
<th>非关系型数据库（如MongoDB）</th>
</tr>
</thead>
<tbody><tr>
<td>表&#x2F;集合</td>
<td>表（Table）</td>
<td>集合（Collection）</td>
</tr>
<tr>
<td>行&#x2F;文档</td>
<td>行（Row）</td>
<td>文档（Document）</td>
</tr>
<tr>
<td>列&#x2F;字段</td>
<td>列（Column）</td>
<td>字段（Field）</td>
</tr>
<tr>
<td>模式</td>
<td>固定模式（Schema）</td>
<td>无模式（Schema-less）</td>
</tr>
<tr>
<td>关系</td>
<td>支持复杂的表与表之间的关系</td>
<td>不直接支持</td>
</tr>
</tbody></table>
<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>那就从 MongoDB 开始学起，原因是之前配置 twikoo 的评论系统时误打误撞用到过，现在的一个新项目需要用到数据库。</p>
<p>MongoDB 是一种文档型 NoSQL 数据库，主要有以下特点：</p>
<ul>
<li><strong>文档型存储</strong>：数据以文档的形式存储，文档是JSON格式的（MongoDB中称为BSON格式，二进制形式的JSON）。</li>
<li><strong>无模式</strong>：与传统数据库不同，MongoDB中的文档不需要固定的表结构，可以灵活地存储不同结构的数据。</li>
<li><strong>横向扩展</strong>：MongoDB可以很容易地通过增加更多的服务器节点来应对数据的增长，而不需要更强的硬件。</li>
</ul>
<p>可以下载 <a class="link"   href="https://www.mongodb.com/try/download/compass" >Compass<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 使用它的 GUI 界面。</p>
<p>它的结构是，Cluster（集群）里有多个数据库，每个数据库是相同的，这样一个分布式结构保证它的安全稳定。</p>
<p>Database（数据库）中有多个 Collection（集合），在集合中有多个 Document（文档），文档就是存储数据的地方，它的格式是 BSON（JSON 的二进制格式，便于存储），Field（字段）就是键，以及它有对应的值。</p>
<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>Create, Read, Update, Delete，四种数据库的基本操作。</p>
<p><a class="link"   href="https://www.mongodb.com/zh-cn/docs/manual/crud/" >文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>Back-End</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Install &amp; Usage</title>
    <url>/4a7ef8fa.html</url>
    <content><![CDATA[<blockquote>
<p>In ubuntu24.04</p>
</blockquote>
<p>Docker Desktop is not supported for ubuntu24.04.</p>
<ol>
<li>卸载旧版本</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get remove docker \</span><br><span class="line">               docker-engine \</span><br><span class="line">               docker.io</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>更新系统软件包</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>安装依赖</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release \</span><br><span class="line">    software-properties-common \</span><br><span class="line">    uidmap </span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>配置软件源</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li>安装 Docker</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>docker --version</code> 验证是否安装成功。</p>
<ol start="6">
<li>启动 Docker</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br></pre></td></tr></table></figure></div>

<ol start="7">
<li>添加用户组</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> groupadd docker</span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></div>

<ol start="8">
<li>测试</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">c1ec31eb5944: Pull complete </span><br><span class="line">Digest: sha256:91fb4b041da273d5a3273b6d587d62d518300a6ad268b28628f74997b93171b2</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure></div>

<ol start="9">
<li>终端登陆 Dockerhub</li>
</ol>
<p>先去 <a class="link"   href="https://hub.docker.com/" >Dockerhub<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 注册一个账号，然后在右上角点击头像，点击 <code>Account Settings</code>，在 <code>Security</code> 中点击 <code>Personal access tokens</code>，然后新建一个 Token，编辑对应名称和权限后，使用它所给出的命令即可。</p>
<p>若出现 <code>Error saving credentials: error storing credentials - err: exec: &quot;docker-credential-desktop&quot;: executable file not found in $PATH, out: `` </code>，则编辑 <code>~/.docker.config.json</code>，把 <code>credsStore</code> 一项删除即可。</p>
<ol start="10">
<li>设置开机自启动</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></div>

<ol start="11">
<li>检查 Docker 服务状态</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status docker</span><br><span class="line"></span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">     Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; preset: enabled)</span><br><span class="line">    Drop-In: /etc/systemd/system/docker.service.d</span><br><span class="line">             └─http-proxy.conf</span><br><span class="line">     Active: active (running) since Fri 2024-09-13 12:42:41 CST; 41min ago</span><br><span class="line">TriggeredBy: ● docker.socket</span><br><span class="line">       Docs: https://docs.docker.com</span><br><span class="line">   Main PID: 142120 (dockerd)</span><br><span class="line">      Tasks: 20</span><br><span class="line">     Memory: 23.8M (peak: 29.9M)</span><br><span class="line">        CPU: 788ms</span><br><span class="line">     CGroup: /system.slice/docker.service</span><br><span class="line">             └─142120 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.s</span><br></pre></td></tr></table></figure></div>

<ol start="12">
<li>配置 rootless（选）</li>
</ol>
<p>放个<a class="link"   href="https://docs.docker.com/engine/security/rootless/" >官方文档链接<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<ol start="13">
<li>通过 Github Action 实现 Docker 镜像自动化构建和推送</li>
</ol>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Push</span> <span class="string">Docker</span> <span class="string">Image</span> <span class="string">with</span> <span class="string">Incremental</span> <span class="string">Tagging</span> <span class="string">and</span> <span class="string">Version</span> <span class="string">Bump</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">tags:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">latest</span> <span class="string">Git</span> <span class="string">tag</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">get_tag</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        TAG=$(git describe --tags --abbrev=0 || echo &quot;v0.0&quot;)</span></span><br><span class="line"><span class="string">        echo &quot;Latest tag: $TAG&quot;</span></span><br><span class="line"><span class="string">        echo &quot;CURRENT_TAG=$TAG&quot; &gt;&gt; $GITHUB_ENV</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Calculate</span> <span class="string">new</span> <span class="string">tag</span> <span class="string">with</span> <span class="string">version</span> <span class="string">bump</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">calc_new_tag</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        CURRENT_TAG=$&#123;&#123; env.CURRENT_TAG &#125;&#125;</span></span><br><span class="line"><span class="string">        VERSION=$(echo $CURRENT_TAG | sed &#x27;s/v//g&#x27;)  </span></span><br><span class="line"><span class="string">        MAJOR=$(echo $VERSION | cut -d. -f1)  </span></span><br><span class="line"><span class="string">        MINOR=$(echo $VERSION | cut -d. -f2)  </span></span><br><span class="line"><span class="string"></span>        </span><br><span class="line">        <span class="string">if</span> [ <span class="string">$MINOR</span> <span class="string">-lt</span> <span class="number">9</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">          <span class="string">NEW_MINOR=$((MINOR+1))</span>  </span><br><span class="line">          <span class="string">NEW_TAG=&quot;v$MAJOR.$NEW_MINOR&quot;</span></span><br><span class="line">        <span class="string">else</span></span><br><span class="line">          <span class="string">NEW_MAJOR=$((MAJOR+1))</span>  </span><br><span class="line">          <span class="string">NEW_MINOR=0</span>  </span><br><span class="line">          <span class="string">NEW_TAG=&quot;v$NEW_MAJOR.$NEW_MINOR&quot;</span></span><br><span class="line">        <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;New tag: $NEW_TAG&quot;</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;NEW_TAG=$NEW_TAG&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Log</span> <span class="string">in</span> <span class="string">to</span> <span class="string">DockerHub</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKERHUB_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKERHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">tag</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        docker build -t $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125;/technews-frontend:$&#123;&#123; env.NEW_TAG &#125;&#125; .</span></span><br><span class="line"><span class="string">        docker tag $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125;/technews-frontend:$&#123;&#123; env.NEW_TAG &#125;&#125; $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125;/technews-frontend:latest</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        docker push $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125;/technews-frontend:$&#123;&#123; env.NEW_TAG &#125;&#125;</span></span><br><span class="line"><span class="string">        docker push $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125;/technews-frontend:latest</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Git</span> <span class="string">credentials</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        git config user.name &quot;github-actions[bot]&quot;</span></span><br><span class="line"><span class="string">        git config user.email &quot;github-actions[bot]@users.noreply.github.com&quot;</span></span><br><span class="line"><span class="string">        git remote set-url origin https://x-access-token:$&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;@github.com/$&#123;&#123; github.repository &#125;&#125;.git</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">new</span> <span class="string">Git</span> <span class="string">tag</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        git tag $&#123;&#123; env.NEW_TAG &#125;&#125;</span></span><br><span class="line"><span class="string">        git push origin $&#123;&#123; env.NEW_TAG &#125;&#125;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/4a17b156.html</url>
    <content><![CDATA[<h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><h6 id="H6"><a href="#H6" class="headerlink" title="H6"></a>H6</h6><p><strong>Bold</strong></p>
<p><em>Italic</em></p>
<p><del>remove</del></p>
<p>text</p>
<p><code>code inline</code></p>
<pre class="mermaid">pie
title P
"1" : 10
"2" : 10
"3" : 50
"4" : 30</pre>


  <div class="note-large 信息">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>信息</p>

    </div>
    <div class="notel-content">
      <p>换行测试<br>换行测试<br>换行测试</p>

    </div>
  </div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">int</span> dist[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">-1</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    queue&lt;PII&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[i][j] = <span class="number">0</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;i, j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> dy[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> nx = t.x + dx[i];</span><br><span class="line">            <span class="type">int</span> ny = t.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span>(nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dist[nx][ny] != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dist[nx][ny] = dist[t.x][t.y] + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;nx, ny&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i]);</span><br><span class="line">    <span class="built_in">BFS</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, dist[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>$$<br>\begin{aligned}<br>a + b &amp; &#x3D; 2 \<br>&amp; &#x3D; 1 \<br>&amp; &#x3D; a - b \<br>\end{aligned}<br>$$</p>
<p>$a + b &#x3D; 1$</p>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>信息</p>

    </div>
    <div class="notel-content">
      <p>换行测试<br>换行测试<br>换行测试</p>

    </div>
  </div>

  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>提示</p>

    </div>
    <div class="notel-content">
      <p>换行测试<br>换行测试<br>换行测试</p>

    </div>
  </div>

  <div class="note-large red">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>自定义标题</p>

    </div>
    <div class="notel-content">
      <p>换行测试<br>换行测试<br>换行测试</p>

    </div>
  </div>


  <div class="note p-4 mb-4 rounded-small default">
    <p>默认 提示块标签</p>

  </div>

  <div class="note p-4 mb-4 rounded-small default">
    <p>default 提示块标签</p>

  </div>

  <div class="note p-4 mb-4 rounded-small primary">
    <p>primary 提示块标签</p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p>success 提示块标签</p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>info 提示块标签</p>

  </div>

  <div class="note p-4 mb-4 rounded-small warning">
    <p>warning 提示块标签</p>

  </div>

  <div class="note p-4 mb-4 rounded-small danger">
    <p>danger 提示块标签</p>

  </div>

  <div class="note p-4 mb-4 rounded-small red icon-padding">
    <i class="note-icon fa-solid fa-bolt"></i><p>自定义提示块标签</p>

  </div>

<details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>Folding 测试： 点击查看更多 </summary>
              <div class='content'>
              <p>啊啊啊啊啊</p>  <div class="note p-4 mb-4 rounded-small danger">    <p>danger 提示块标签</p>  </div>   <div class="note p-4 mb-4 rounded-small tip">    <p>tip 提示块标签</p>  </div> 
              </div>
            </details>

<details class="red" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>title </summary>
              <div class='content'>
              <p>Yes.</p>
              </div>
            </details>

<div class="tabs" id="tab-first-unique-name"><ul class="nav-tabs"><li class="tab active"><a class="#first-unique-name-1">First Tab</a></li><li class="tab"><a class="#first-unique-name-2">Second Tab</a></li><li class="tab"><a class="#first-unique-name-3">Third Tab</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="first-unique-name-2"><p><strong>This is Tab 2.</strong></p>
<p>This is Tab 2.</p></div><div class="tab-pane" id="first-unique-name-3"><p><strong>This is Tab 3.</strong></p>
<p>This is Tab 3.</p>
<p>This is Tab 3.</p></div></div></div>

<p>不设置任何参数的 <a class="button " href='/' title='按钮'>按钮</a> 适合融入段落中。</p>
<p>regular 按钮适合独立于段落之外：</p>
<a class="button  regular" href='https://www.ohevan.com' title='示例博客'><i class='fa-solid fa-play-circle'></i> 示例博客</a>
<a class="button  regular" href='https://www.ohevan.com' title='示例博客'><i class='fa-solid fa-play-circle'></i> 示例博客</a>
<p>large 按钮更具有强调作用，建议搭配 center 使用：</p>
<a class="button  center large" href='https://redefine-docs.ohevan.com' title='开始使用'><i class='fa-solid fa-download'></i> 开始使用</a>

]]></content>
      <categories>
        <category>world</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>Implementing Vue Reactivity Using Javascript</title>
    <url>/57511a32.html</url>
    <content><![CDATA[<p>代码思路：</p>
<p>先将每个变量注入到 Vue 实例中，使我们不必通过 data 访问，可以直接通过 Vue 实例访问。</p>
<p>然后为每一个键（变量）创建一个 Observer。</p>
<p>最后解析整个页面模板，为所有的引用变量的地方创建一个 Watcher，然后把它加到对应的 Dep 中，一个变量对应一个 Dep 但是一个变量可以被多次引用，每一个引用都是一个 Watcher，这样在一个 Watcher 改变时，它的 setter 就会触发它所在的 Dep 的更新。</p>
<p>中间对于数据的替换和更新用到了一系列的字符串操作和正则表达式。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm, key, callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span> = callback;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// target 在使用时不需要显式声明</span></span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">oldValue</span> = vm[key];</span><br><span class="line">    <span class="comment">// 激活 getter，将这个值的 Watcher 添加到它所在对象的 Sub</span></span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 重置 target</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newValue = <span class="variable language_">this</span>.<span class="property">vm</span>[<span class="variable language_">this</span>.<span class="property">key</span>];</span><br><span class="line">    <span class="keyword">if</span> (newValue === <span class="variable language_">this</span>.<span class="property">oldValue</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">callback</span>(newValue);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">oldValue</span> = newValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compile</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">el</span> = vm.<span class="property">$el</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compile</span>(<span class="variable language_">this</span>.<span class="property">el</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">compile</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> childNodes = el.<span class="property">childNodes</span>;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(childNodes).<span class="title function_">forEach</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123; <span class="comment">// text</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileText</span>(node);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123; <span class="comment">// element</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileElement</span>(node);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 还有子节点</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">childNodes</span> &amp;&amp; node.<span class="property">childNodes</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compile</span>(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">compileElement</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/^v-([\w-]+)$/</span>;</span><br><span class="line">    <span class="keyword">const</span> regx = <span class="regexp">/:([\w-]+)=&quot;([^&quot;]+)&quot;/</span>;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(node.<span class="property">attributes</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> match = regx.<span class="title function_">exec</span>(<span class="string">`<span class="subst">$&#123;attr.name&#125;</span>=&quot;<span class="subst">$&#123;attr.value&#125;</span>&quot;`</span>);</span><br><span class="line">      <span class="keyword">if</span> (match) &#123;</span><br><span class="line">        <span class="keyword">const</span> name = match[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">const</span> value = match[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, value, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">          node.<span class="title function_">setAttribute</span>(name, newValue);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((match = reg.<span class="title function_">exec</span>(attr.<span class="property">name</span>))) &#123;</span><br><span class="line">        <span class="keyword">const</span> opName = match[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">const</span> value = attr.<span class="property">value</span>; <span class="comment">// string</span></span><br><span class="line">        <span class="comment">// ( _ ) 捕获从 1 下标开始</span></span><br><span class="line">        <span class="keyword">switch</span> (opName) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;model&quot;</span>:</span><br><span class="line">            node.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">vm</span>[value];</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, value, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">              node.<span class="property">value</span> = newValue;</span><br><span class="line">            &#125;);</span><br><span class="line">            node.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">vm</span>[value] = event.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;if&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;on&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;else&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;else-if&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;show&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;for&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">compileText</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>;</span><br><span class="line">    <span class="comment">// const value = node.textContent.replace(/\s/g, &#x27;&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> value = node.<span class="property">textContent</span>;</span><br><span class="line">    <span class="keyword">const</span> tokens = [];</span><br><span class="line">    <span class="keyword">let</span> result,</span><br><span class="line">      index,</span><br><span class="line">      lastIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((result = reg.<span class="title function_">exec</span>(value))) &#123;</span><br><span class="line">      index = result.<span class="property">index</span>;</span><br><span class="line">      <span class="keyword">if</span> (index &gt; lastIndex) &#123;</span><br><span class="line">        tokens.<span class="title function_">push</span>(value.<span class="title function_">slice</span>(lastIndex, index));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> key = result[<span class="number">1</span>].<span class="title function_">trim</span>();</span><br><span class="line">      tokens.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">vm</span>[key]);</span><br><span class="line">      lastIndex = index + result[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> pos = tokens.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// update</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, key, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">        tokens[pos] = newValue;</span><br><span class="line">        node.<span class="property">textContent</span> = tokens.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lastIndex &lt; value.<span class="property">length</span>) &#123;</span><br><span class="line">      tokens.<span class="title function_">push</span>(value.<span class="title function_">slice</span>(lastIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tokens.<span class="property">length</span>) &#123;</span><br><span class="line">      node.<span class="property">textContent</span> = tokens.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = []; <span class="comment">// watchers</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addSub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">sub</span>) =&gt;</span> sub.<span class="title function_">update</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = data;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">walk</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">walk</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> <span class="title function_">defineProperty</span>(data, key, data[key]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为每个属性值添加 getter 和 setter，这是响应式的基础</span></span><br><span class="line"><span class="comment">// 同时为每个对象添加一个 dep</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineProperty</span>(<span class="params">data, key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line">  <span class="comment">// is a object</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="title class_">Object</span> &amp;&amp; value !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Observer</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Dep</span>.<span class="property">target</span> &amp;&amp; dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>); <span class="comment">// Watcher initualize</span></span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (value === newValue) <span class="keyword">return</span>;</span><br><span class="line">      value = newValue;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="title class_">Object</span> &amp;&amp; value !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Observer</span>(value);</span><br><span class="line">        <span class="comment">// 如果更改的值是一个对象，也要对每个对象的值进行观察初始化</span></span><br><span class="line">      &#125;</span><br><span class="line">      dep.<span class="title function_">notify</span>();</span><br><span class="line">      <span class="comment">// 触发每一个 Sub 的更新。</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$options</span> = options || &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span> || &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> el = options.<span class="property">el</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$el</span> = <span class="keyword">typeof</span> el === <span class="string">&quot;string&quot;</span> ? <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el) : el;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入</span></span><br><span class="line">    <span class="title function_">proxy</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">    <span class="comment">// vm.$data.prop -&gt; vm.prop</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 观察</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模板分析</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Compile</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">// 找到一开始需要响应式的位置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">proxy</span>(<span class="params">target, data</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data[key];</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        data[key] = newValue;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>My Website Dev Log</title>
    <url>/51cade6f.html</url>
    <content><![CDATA[<h1 id="2024"><a href="#2024" class="headerlink" title="2024"></a>2024</h1><h2 id="July"><a href="#July" class="headerlink" title="July"></a>July</h2><h3 id="29"><a href="#29" class="headerlink" title="29"></a>29</h3><p>刚有点想法，利用 <code>create-nuxt-app</code> 创建了一个 nuxt2 的项目，很多配置项我都没见过，一一了解了一遍。</p>
<p>比如一个网站的开发流程啊，动态静态网站区别，网站部署，框架有什么用，选什么框架，UI框架又是什么。</p>
<p>框架选了 Nuxt，UI 框架选了 Tailwind css</p>
<p>和铃仙交流了很多，我们都收获不少。</p>
<h3 id="30"><a href="#30" class="headerlink" title="30"></a>30</h3><p>继续昨天的任务。</p>
<p>简单完成了主页和一个没有什么用的 Nav，做了一个小 NavButton，试了试 Tailwind UI 的 404 页面，顺便把它变成了一个路由页面。</p>
<p>然后把网站利用 gh-pages 包部署到 github pages 上。</p>
<p>在晚上意识到原来用的是老版本的 Nuxt，于是将项目迁移到最新的 Nuxt3.12 版本。</p>
<h3 id="31"><a href="#31" class="headerlink" title="31"></a>31</h3><p>重头戏，写了好多东西（其实也没有多少）</p>
<p>把项目重构了一遍，结构更加清晰。</p>
<p>使用路由，重载路由规则。</p>
<p>学习 Typescript，这玩意越来越像 C++ JAVA C# 这种语言了。</p>
<p>然后学习项目结构配置，</p>
<p>将包管理器换为 pnpm，</p>
<p>完善了 Nav 布局，</p>
<p>简单入门 layouts，middleware，</p>
<p>配置一下 404 的路由规则。</p>
<p>把 NavButton 的 Props 加上了，简单写了几个待完善的页面。</p>
<p>分别为默认和 layouts 配置了页面切换动画。</p>
<p>Vsc 插件生态。</p>
<p>添加了 font-awesome 图标支持，只需要在 config 里添加需要用的图标名称，然后在对应组件里添加：<code>&lt;font-awesome icon=&quot;name&quot; /&gt; </code> 即可。</p>
<p>github pages url 容易出问题，要么尽量使用相对路径，要么还是换个域名吧，然后我就部署到 vercel 了。</p>
<h2 id="Auguest"><a href="#Auguest" class="headerlink" title="Auguest"></a>Auguest</h2><p>label</p>
<h3 id="01"><a href="#01" class="headerlink" title="01"></a>01</h3><p>完善布局。</p>
<h3 id="02"><a href="#02" class="headerlink" title="02"></a>02</h3><p>咕咕咕</p>
<h3 id="03"><a href="#03" class="headerlink" title="03"></a>03</h3><p>完善侧边栏，文章组件卡片和 NavBar 以及布局。</p>
<p>完善 Archives Albums About 页面。</p>
<p>先这样吧。</p>
<h3 id="04"><a href="#04" class="headerlink" title="04"></a>04</h3><p>修复 bug，适配响应式。</p>
<h3 id="05"><a href="#05" class="headerlink" title="05"></a>05</h3><p>没做什么，用 js 模拟了一下 vue 的响应式，算是稍微深入了解了一下原理。</p>
<h3 id="06"><a href="#06" class="headerlink" title="06"></a>06</h3><p>更新卡片以及链接的样式，很好看。</p>
<h3 id="07"><a href="#07" class="headerlink" title="07"></a>07</h3><p>着手个人作品集网站的整理和开发，使用 Vue 框架，打算做简单点不需要太多功能。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202408081146820.webp"
                      alt="image.png"
                ></p>
<p>目前是打算先把之前写过的各种东西组件化放进来。</p>
<p>才整了三个组件我就觉得麻烦了，然后写了两个脚本分别生成卡片组和路由。</p>
<h3 id="08"><a href="#08" class="headerlink" title="08"></a>08</h3><p>完善个人网站响应式，优化项目结构，研究了一下，使得局域网设备可以实时预览项目（改一下 <code>vite.config.js</code>，防火墙的锅）</p>
<p>简单学习了解了一下浏览器的工作原理，堪比一个操作系统的复杂度。</p>
<h3 id="09"><a href="#09" class="headerlink" title="09"></a>09</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202408091138933.webp"
                      alt="image.png"
                ></p>
<p>完善了下按钮样式和其它布局。</p>
<p>把所有的旧组件都添加完成了！</p>
<p>接下来可以开始新的练习了。</p>
<p>很棒！</p>
<h3 id="26"><a href="#26" class="headerlink" title="26"></a>26</h3><p>中间忘记写日志了，现在是这样的：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202408281739379.webp"
                      alt="image.png"
                ></p>
<p><strong>UPDATES:</strong></p>
<ul>
<li>把所有的小项目组件化</li>
<li>完善主页样式和其它页面样式</li>
<li>添加了新项目 CalendarView：<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202408281740987.webp"
                      alt="Snipaste_2024-08-28_17-40-13.png"
                ></li>
<li>介绍一下，这是一个记录 App，日历仅用于索引，左键可以将当天的感受指数 $+1$，右键是 $-1$,会根据感受指数显示不同的颜色，控制面板现在有两个按钮，第一个是定位到当天，第二个是显示年视图。做了好看的切换动画。后端使用 Express，暂时只运行在本地，用 <code>json</code> 文件作为数据库存储数据，目前仅个人使用。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>logs</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Note</title>
    <url>/772e1c59.html</url>
    <content><![CDATA[<blockquote>
<p>东拼西凑的 <code>python</code> 初学之路。</p>
</blockquote>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul>
<li>制表符：<code>\t</code></li>
<li>换行符：<code>\n</code></li>
<li>去除右边空白：<code>.rstrip()</code></li>
<li>去除左边空白：<code>.lstrip()</code></li>
<li>去除左右两边空白（包括换行符）：<code>.strip()</code></li>
<li>字符串内使用引号：<code>\&quot;</code></li>
<li>首字母大写：<code>.title()</code></li>
<li>全部大写：<code>.upper()</code></li>
<li>全部小写：<code>.lower()</code></li>
<li>构造字符串（花括号内为变量）：&#96;f”Hello,{variant}.”</li>
<li>去除前缀：<code>.removeprefix(&quot;string&quot;)</code></li>
<li>去除后缀：<code>.removesuffix(&quot;.txt&quot;)</code></li>
</ul>
<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ul>
<li>乘法：<code>*</code></li>
<li>除法（返回浮点数）：<code>/</code></li>
<li>大数易读：<code>1_000_000_000</code></li>
<li>同时赋值：<code>x, y, z = 0, 2, 7</code></li>
<li>同时输出：<code>print(x, y, z)</code></li>
<li>幂次：<code>**</code></li>
<li>Python 之禅：<code>import this</code></li>
</ul>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>定义：方括号扩死，里面元素用逗号隔开。</p>
<p>下标和数组一样，从零开始。</p>
<p>负数下标表示倒数第几个。</p>
<ul>
<li>末尾插入元素：<code>.append()</code></li>
<li>对应位置插入元素：<code>.insert(1, &#39;fgh&#39;)</code></li>
<li>删除对应位置的元素：<code>del b[1]</code></li>
<li>弹出末尾元素：<code>.pop()</code></li>
<li>访问弹出元素：<code>a = b.pop()</code></li>
<li>弹出对应位置的元素：<code>.pop(1)</code></li>
<li><code>pop</code> 和 <code>del</code> 的区别在于 <code>pop</code> 可访问删除的元素，<code>del</code> 不行。</li>
<li>根据值删除<strong>一个</strong>元素：<code>.remove(&quot;spw&quot;)</code></li>
<li>排序（列表中元素类型要一样才能排序，按照字典序排序）：<code>.sort()</code></li>
<li>倒序：<code>.sort(reverse = True)</code></li>
<li>临时排序，不改变列表，可加入参数：<code>sorted(b, reverse = True)</code></li>
<li>访问列表中元素个数：<code>len(b)</code></li>
</ul>
]]></content>
      <categories>
        <category>Back-End</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>React Note</title>
    <url>/f139e650.html</url>
    <content><![CDATA[<blockquote>
<p>React 采用了一种全新的 JSX 格式，对原来 JS 的语法做了进一步的扩展，使你可以在里面使用 HTML 标签从而将它变成一个组件，它的组件化的设计理念与 Vue 有很多相似之处。</p>
</blockquote>
<h1 id="Basis"><a href="#Basis" class="headerlink" title="Basis"></a>Basis</h1><p>先说一下基础概念。</p>
<ul>
<li>**组件化(Component)**：和 Vue 基本相同，页面中所见皆是组件，不同的组件构成了一个页面。</li>
<li>**状态(State)**：状态是组件的数据，组件的显示内容可以根据状态的变化而变化。相当于 Vue 中的响应式变量。</li>
<li>**属性(Props)**：传递给组件的数据，相当于参数。</li>
</ul>
<p>不使用框架直接在 HTML 中使用可以引入两个 <code>script</code> 标签：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@18/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><p>状态，也就是 Vue 中的响应式数据。</p>
<p>直接修改状态的数据并不会导致页面更新，因为这个状态占用的内存地址没有发生改变，所以如果想要让页面更新，需要更新这个状态，用到 <code>setState</code> 方法：</p>
<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(); <span class="comment">/* 调用父类的构造函数 */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="number">2</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>([arg1], [arg2])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以有两个参数：</p>
<ul>
<li>第一个参数：可以是对象或者函数，如果是对象则直接修改对应的键值，这里相当于将两个对象进行了合并，如果是函数则执行相应的操作。</li>
<li>第二个参数：回调函数，由于 <code>setState</code> 是一个异步操作，所以第二个参数就是在执行完成第一个参数后再执行的操作。</li>
</ul>
<p>在 React 的 HTML 标签中使用变量需要用到插值表达式，用花括号包裹即可，属性值是变量时不需要双引号包裹。</p>
<h1 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h1><p>先把根组件挂载到根元素上，这里在 <code>index.html</code> 中有一个 id 为 root 的元素，我们要把根组件挂载到这上面并渲染：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br></pre></td></tr></table></figure></div>

<p><code>createRoot</code> 返回一个根对象，有一个 <code>render</code> 方法，可以将 React 组件渲染到页面。</p>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>类组件。</p>
<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(); <span class="comment">/* 调用父类的构造函数 */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="number">2</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [component]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要有一个 <code>render</code> 方法来渲染组件，这个方法返回一个组件，组件只能由<strong>一个根元素包裹</strong>。有多行内容时，需要用小括号进行包裹。</p>
<p>但我们有时候并不想额外嵌套一个 <code>div</code> 标签，于是可以使用 <code>&lt;Fragment&gt;</code> 标签包裹，它不会被渲染，可以简写为 <code>&lt;&gt;&lt;/&gt;</code>。</p>
<p>组件挂载时会先执行 <code>render</code> 方法，因此不要有任何多余的操作。</p>
<p>只有状态值(state)或属性值(props)发生变化后才会触发重新渲染。</p>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>函数组件。</p>
<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> ()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要渲染什么直接 return 即可。</p>
<p>变量函数可以直接定义，但由于没有构造函数，需要使用 <code>useState()</code> 来初始化状态值。</p>
<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setState] = <span class="title class_">React</span>.<span class="title function_">useState</span>([initValue]);</span><br></pre></td></tr></table></figure></div>

<p><code>useState()</code> 返回一个数组，第一个是初始化的状态值，第二个是设置这个状态值的函数，可以使用解构的方法得到。</p>
<p>这样使用变量就可以直接使用无需 <code>this.state</code>，修改只需要 <code>setState(newValue)</code> 而无需 <code>this.setState(&#123;key: newValue&#125;)</code>。</p>
<p>像极了 Vue 中的组合式 API 和选项式 API 之间的关系。</p>
<p>但是如果需要在挂载后执行 <code>fetch</code> 操作，可能会出现死循环，<code>fetch</code> 到数据后，状态修改，函数从头执行……</p>
<p>在类组件中我们可以使用生命周期方法，那函数组件呢？</p>
<p>这里需要使用 <code>useEffect</code>，<code>useEffect</code> 是 React 中的一个 Hook，用于在函数组件中处理副作用（side effects）。副作用是指那些在组件渲染过程中需要执行但不直接产生 UI 的代码，比如数据获取、订阅、手动修改 DOM、记录日志等。</p>
<p>第一个参数是要执行的函数，函数可以返回一个函数，作为清理函数；</p>
<p>第二个参数是一个依赖数组，如果为空代表只执行一次；如果没有那么每次渲染都会执行；如果数组包含一个或多个变量，那么会在依赖发生变化时才会执行。</p>
<p>函数组件的参数就是用来接收 props 的，也是一个对象。</p>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><p>可以在元素中添加 <code>style</code> 属性，但是属性值需要是一个对象，而由于变量需要用花括号包裹，所以需要用到两个花括号。</p>
]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Note</title>
    <url>/fbbf86b6.html</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small warning icon-padding">
    <i class="note-icon fa-solid fa-hand-point-right"></i><p>本 <strong>Note</strong> 记录学习过程中遇到的一些问题，学到哪里便记到哪里，<strong>不适合作为系统学习的参考</strong>，持续更新。</p>

  </div>

<h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><p><code>var</code> 为全局作用域，可以理解为所有的 <code>var</code> 相当于都出现在文件开头，在全局内都有效。</p>
<p><code>let</code> 为块级作用域。</p>
<p>举个例子：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a ,b);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>这段代码中，<code>b</code> 会报错，而 <code>a</code> 不会。</p>
<p><code>const</code> 为常量，不可修改，需要在初始化时声明数值。。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ob = &#123;</span><br><span class="line">  [key]: [value],</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure></div>

<p>对象的 <code>key</code> 可以是字符串、非字符串（会转换为字符串），符号。</p>
<p>通常对象的键不可以是函数，我们可以把函数转化为相应的字符串，或者使用 <code>Map</code> 数据结构。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>以创建一个长度为 <code>num</code> 且初始化全部是 0 为例子。</p>
<h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>; <span class="comment">// 假设数组长度为 10</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(num).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br></pre></td></tr></table></figure></div>

<h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>; <span class="comment">// 假设数组长度为 10</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: num &#125;, <span class="function">() =&gt;</span> <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br></pre></td></tr></table></figure></div>

<p><code>Array.from()</code> 可以将一个类数组对象转化为数组，这个对象需要有 <code>length</code> 属性，否则数组长度将为 0</p>
<p><strong>示例</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = &#123;<span class="number">1</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;haha&#x27;</span>, <span class="number">3</span>: <span class="number">3</span>, <span class="string">&#x27;length&#x27;</span>: <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="title class_">Array</span>.<span class="title function_">from</span>(arr);</span><br></pre></td></tr></table></figure></div>

<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>朴素的 <code>for</code> 循环，这里就不献丑了。</p>
<h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><h3 id="简单声明"><a href="#简单声明" class="headerlink" title="简单声明"></a>简单声明</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数<span class="number">1</span>, 参数<span class="number">2</span>, ...) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">  <span class="comment">// 执行一些操作</span></span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>示例：</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;Alice&quot;</span>)); <span class="comment">// 输出: Hello, Alice!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>也可以赋值给一个变量：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 函数名 = <span class="keyword">function</span>(<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span>, ...</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><strong>示例：</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> greet = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;Bob&quot;</span>)); <span class="comment">// 输出: Hello, Bob!</span></span><br></pre></td></tr></table></figure></div>

<p>也可以使用 ES6 引入的<strong>箭头函数</strong>：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 函数名 = <span class="function">(<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span>, ...</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>如果只有一个表达式，那么可以进一步简化（省略 <code>return</code>）：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 函数名 = <span class="function">(<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span>, ...</span>) =&gt;</span> 返回值;</span><br></pre></td></tr></table></figure></div>

<p>箭头前是函数的形参，箭头后是函数体（返回值）。</p>
<p><strong>示例：</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">greet</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化形式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">greet</span> = name =&gt; <span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;Charlie&quot;</span>)); <span class="comment">// 输出: Hello, Charlie!</span></span><br></pre></td></tr></table></figure></div>

<p>箭头函数只能被赋值给一个变量，或者作为其它表达式的一部分。</p>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>接受一个&#x2F;多个函数作为参数，或者返回一个函数的函数。</p>
<p><strong>示例：</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createMultiplier</span> = multiplier =&gt; <span class="function"><span class="params">number</span> =&gt;</span> number * multiplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> double = <span class="title function_">createMultiplier</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">double</span>(<span class="number">5</span>)); <span class="comment">// 输出: 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> triple = <span class="title function_">createMultiplier</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">triple</span>(<span class="number">5</span>)); <span class="comment">// 输出: 15</span></span><br></pre></td></tr></table></figure></div>

<p><strong>解释</strong>：</p>
<ul>
<li><code>createMultiplier</code> 是一个高阶函数，它接受一个参数 <code>multiplier</code>。</li>
<li>它返回一个新的箭头函数 <code>number =&gt; number * multiplier</code>。</li>
<li>返回的函数接收一个参数 <code>number</code>，并返回 <code>number</code> 与 <code>multiplier</code> 的乘积。</li>
</ul>
<ol>
<li>接受函数作为参数</li>
</ol>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isEven</span> = num =&gt; num % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> evenNumbers = numbers.<span class="title function_">filter</span>(isEven);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evenNumbers); <span class="comment">// 输出: [2, 4]</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>filter</code> 方法接受一个回调函数 <code>isEven</code>，该函数判断一个数是否为偶数。</li>
<li><code>filter</code> 方法遍历 <code>numbers</code> 数组，并返回所有使回调函数返回 <code>true</code> 的元素组成的新数组。</li>
</ul>
<ol start="2">
<li>一个简单的缓存函数</li>
</ol>
<p><strong>示例：</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">cacheFunction</span> = fn =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(args);</span><br><span class="line">    <span class="keyword">if</span> (!cache[key]) &#123;</span><br><span class="line">      cache[key] = <span class="title function_">fn</span>(...args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[key];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> cachedAdd = <span class="title function_">cacheFunction</span>(add);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">cachedAdd</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 输出: 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">cachedAdd</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 输出: 3（从缓存中获取）</span></span><br></pre></td></tr></table></figure></div>

<p>详细解释一下这个缓存函数：</p>
<ul>
<li><code>cacheFunction</code> 是一个高阶函数，接受一个函数 <code>fn</code> 作为参数。</li>
<li><code>cache = &#123;&#125;</code> 是用来初始化一个空对象，用于存储函数的计算结果。这个对象的键是<strong>函数参数的字符串表示</strong>（通过剩余参数将所有参数存入一个数组中，然后将这个数组转化为 JSON 字符串，作为 <code>cache</code> 对象的键），值是函数执行的结果。</li>
<li>它返回一个新的函数，该函数使用一个对象 <code>cache</code> 来存储计算结果。</li>
<li>当调用返回的函数时，它会先检查 <code>cache</code> 中是否有结果，如果没有则计算并存储结果。</li>
</ul>
<h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">...name</span><br></pre></td></tr></table></figure></div>

<p>表示函数的可变参数，所有传入的参数收集到一个 <code>name</code> 数组中。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">exampleFunction</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">exampleFunction</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 输出: [1, 2, 3]</span></span><br></pre></td></tr></table></figure></div>

<p>如本例中的 <code>args</code> 数组就是 <code>[1, 2, 3]</code>。</p>
<h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>函数在声明之前可以被调用，但是函数表达式不可以。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sayHello</span>()); <span class="comment">// 输出: Hello, World!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sayHello</span>()); <span class="comment">// 报错: sayHello is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sayHello = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>在对应参数名后面加上问号即可，所有可选参数需要放在尾部。</p>
<p>也可以通过设置默认值，这样可以写在头部。（不建议）</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newArray = array.<span class="title function_">map</span>(<span class="title function_">callback</span>(currentValue[, index[, array]])[, thisArg])</span><br></pre></td></tr></table></figure></div>

<p>该方法对数组中的每个元素调用一次函数，得到的返回值作为新的数组值，最后得到一个新数组。</p>
<ul>
<li><code>callback</code>：用于生成新数组元素的函数，接受三个参数：<ul>
<li><code>currentValue</code>：当前正在处理的元素。</li>
<li><code>index</code>（可选）：当前正在处理的元素的索引。</li>
<li><code>array</code>（可选）：<code>map</code> 方法被调用的数组。</li>
</ul>
</li>
<li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 值的对象。</li>
</ul>
<p><strong>示例：</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用箭头函数作为回调函数</span></span><br><span class="line"><span class="keyword">const</span> doubled = numbers.<span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(doubled); <span class="comment">// 输出: [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Charlie&quot;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userNames = users.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userNames); <span class="comment">// 输出: [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;]</span></span><br></pre></td></tr></table></figure></div>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>用于数组，创建一个新数组。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newArray = array.<span class="title function_">filter</span>(<span class="title function_">callback</span>(element[, index[, array]])[, thisArg])</span><br></pre></td></tr></table></figure></div>

<p>新数组将包含通过 <code>callback</code> 测试的元素。</p>
<h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;&#125;, [time]);</span><br></pre></td></tr></table></figure></div>

<p><code>[time]</code> 为毫秒级单位，第一个参数是要执行的函数，第二个参数是延迟执行的时间。</p>
<p>如果要停止它：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="built_in">setTimeout</span>(...);</span><br><span class="line"><span class="built_in">clearTimeout</span>(fn);</span><br></pre></td></tr></table></figure></div>

<h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h3><p>按照一定时间间隔重复执行某个函数。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(callback, delay, ...args);</span><br></pre></td></tr></table></figure></div>

<p>参数分别为：函数，时间间隔，传递给函数的附加参数（可选）。</p>
<p>如果要停止它：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="built_in">setInterval</span>(...);</span><br><span class="line"><span class="built_in">clearInterval</span>(fn);</span><br></pre></td></tr></table></figure></div>

<h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">splice</span>(index, x);</span><br></pre></td></tr></table></figure></div>

<p>删除这个数组中从下标 <code>index</code> 开始的 <code>x</code> 项。</p>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>数组对象的一个方法，对数组中的每个元素依次执行回调函数，并将所有的结果以某种方式累积为一个值。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">reduce</span>(<span class="title function_">callback</span>(accumulator, currentValue, currentIndex, array), initialValue)</span><br></pre></td></tr></table></figure></div>

<p><code>accumulator</code> 累积所有结果，<code>currentValue</code> 是当前正在处理的元素。</p>
<p><code>currentIndex</code>（可选）是当前正在处理的元素的索引。</p>
<p><code>array</code>（可选）是当前数组。</p>
<p><code>initialValue</code>（可选） 是 <code>accumulator</code> 的初始值。若没有，则以数组第一个元素为初始值，从第二个元素开始执行回调函数。</p>
<p>示例：数组求和</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 输出 15</span></span><br></pre></td></tr></table></figure></div>

<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>将一个字符串分割为子字符串数组。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">split</span>(separator, limit)</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>separator</code>：必选，分割符（可以是字符串或者正则表达式）。</li>
<li><code>limit</code>：可选，最多返回几个字符。</li>
</ul>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>用于将一个数组内的全部元素都转变为字符串并用指定分隔符将它们连接成一个字符串作为返回值。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">join</span>(separator)</span><br></pre></td></tr></table></figure></div>

<h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><p><code>innerHTML</code> 属性用于获取或设置元素的 HTML 内容。它会将元素内部的所有 HTML 标签和文本内容作为一个字符串返回或设置。这意味着你可以使用 <code>innerHTML</code> 动态地插入 HTML 结构。</p>
<h3 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a>innerText</h3><p><code>innerText</code> 属性用于获取或设置元素的文本内容。它会忽略任何 HTML 标签，只返回或设置纯文本。这意味着 <code>innerText</code> 只会处理可见的文本内容，而不会包含任何 HTML 标签或嵌套结构。</p>
<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="CSS-选择器的区别"><a href="#CSS-选择器的区别" class="headerlink" title="CSS 选择器的区别"></a>CSS 选择器的区别</h2><ol>
<li><p><strong><code>.container &gt; .panel</code></strong></p>
<ul>
<li>选择所有直接子元素 <code>.panel</code>，它们的父元素是 <code>.container</code>。</li>
<li><strong>示例：</strong></li>
</ul>
</li>
</ol>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span>直接子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span>不是直接子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>仅选择第一个 <code>div.panel</code>，因为它是 <code>div.container</code> 的直接子元素。</p>
<ol start="2">
<li><p><strong><code>.container .panel</code></strong></p>
<ul>
<li>选择所有后代元素 <code>.panel</code>，它们位于 <code>.container</code> 内部，无论层级如何。</li>
<li><strong>示例：</strong></li>
</ul>
</li>
</ol>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span>直接子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span>嵌套的子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>选择两个 <code>div.panel</code>，因为它们都是 <code>div.container</code> 的后代元素。</p>
<ol start="3">
<li><p><strong><code>.container.panel</code></strong></p>
<ul>
<li>选择同时包含 <code>container</code> 和 <code>panel</code> 类的所有元素。</li>
<li><strong>示例：</strong></li>
</ul>
</li>
</ol>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container panel&quot;</span>&gt;</span></span><br><span class="line">  同时拥有 container 和 panel 类的元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span>单独拥有 panel 类的元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>仅选择第一个 <code>div</code>，因为它同时拥有 <code>container</code> 和 <code>panel</code> 类。</p>
<h2 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h2><p><code>window</code> 对象是 JavaScript 在浏览器环境中的全局对象，表示浏览器的窗口或框架。它包含了许多有用的属性和方法，用于操作浏览器窗口和与用户交互。在浏览器中，所有全局变量、函数和对象都是 <code>window</code> 对象的属性和方法。</p>
<p>它的属性和属性值过多，这里不多列举。</p>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selectors);</span><br></pre></td></tr></table></figure></div>

<p>返回的是匹配的第一个元素。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selectors);</span><br></pre></td></tr></table></figure></div>

<p>返回的是一个 NodeList，是一种类数组对象，表示文档中的一组节点，储存<strong>匹配选择器</strong>的所有元素。</p>
<p>不是数组，有 <code>length</code> 属性，可以通过索引访问其中的元素。</p>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>遍历数组或类数组对象，对数组中的每个元素执行一次提供（参数）的回调函数。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">currentValue, index, array</span>) &#123;</span><br><span class="line">  <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>currentValue</code> 必选，表示当前正在处理的元素。</li>
<li><code>index</code> 可选，表示当前正在处理的元素的索引，从 0 开始。</li>
<li><code>array</code> 可选，调用数组本身。</li>
</ul>
<h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">item.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, [<span class="keyword">function</span>]);</span><br></pre></td></tr></table></figure></div>

<p>向指定元素添加事件监听器，当事件（这里是点击）发生时，执行相应的回调函数。</p>
<p><strong>常用的事件</strong></p>
<ul>
<li><code>DOMContentLoaded</code>：文档内容加载完成</li>
<li><code>click</code></li>
<li><code>mouseover</code></li>
<li><code>keydown</code></li>
</ul>
<h3 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">item.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;[class]&#x27;</span>);</span><br><span class="line">item.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;[class]&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p>为当前元素添加&#x2F;删除 <code>class</code></p>
<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>了解 <code>call</code> 方法之前，先来了解一下 <code>this</code>。</p>
<p>在JavaScript中，<code>this</code>关键字总是指向一个对象，通常是指向调用函数的那个对象。<code>this</code>的值在函数被调用时才会确定，并且其值取决于函数是如何被调用的。</p>
<ol>
<li><strong>全局函数</strong>：在全局函数中，<code>this</code>指向全局对象（在浏览器中是<code>window</code>）。</li>
</ol>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayGlobal</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayGlobal</span>(); <span class="comment">// 在浏览器中，控制台将显示window对象</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li><strong>对象的方法</strong>：当一个函数作为某个对象的方法被调用时，<code>this</code>指向该对象。</li>
</ol>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 这里this指向person对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">sayName</span>(); <span class="comment">// 输出: Alice</span></span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li><strong>构造函数</strong>：在构造函数中，<code>this</code>指向新创建的对象。</li>
</ol>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">make, model</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">model</span> = model;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myCar = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&#x27;Toyota&#x27;</span>, <span class="string">&#x27;Corolla&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCar.<span class="property">make</span>); <span class="comment">// 输出: Toyota</span></span><br><span class="line"><span class="comment">// 在Car构造函数中，this指向新创建的myCar对象</span></span><br></pre></td></tr></table></figure></div>

<p><code>new</code> 用于新建一个对象，后面调用构造函数。</p>
<ol start="4">
<li><strong>事件处理器</strong>：在事件处理器中，<code>this</code>指向触发事件的对象。</li>
</ol>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="variable constant_">HTML</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// JavaScript</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;clickMe&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 这里this指向被点击的button元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(<span class="string">&#x27;Button was clicked!&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li><strong>箭头函数</strong></li>
</ol>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 这里this指向person对象，而不是全局对象或window</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">greet</span>(); <span class="comment">// 一秒钟后输出: Bob</span></span><br></pre></td></tr></table></figure></div>

<p><code>call</code>方法的作用是调用一个函数，并显式地设置函数体内的<code>this</code>对象，同时传递参数给这个函数。<code>call</code>方法的第一个参数是<code>this</code>的绑定对象，后面的参数是传递给函数的参数。</p>
<p><strong>例如：</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">introduce</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;My name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animal = &#123; <span class="attr">name</span>: <span class="string">&quot;Dog&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用call方法借用Person的introduce方法</span></span><br><span class="line"><span class="keyword">var</span> animalIntroduce = <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">introduce</span>.<span class="title function_">call</span>(animal);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animalIntroduce); <span class="comment">// 输出: My name is Dog</span></span><br></pre></td></tr></table></figure></div>

<p>这里 <code>.call(animal)</code> 就改变了一个<strong>原型构造函数</strong>的 <code>this</code> 值为对象 <code>animal</code>，实现了方法的借用。</p>
<p>其它的功能比如改变函数的调用上下文，实现继承等。</p>
<p><strong>示例：</strong></p>
<p>比如数组的一个方法 <code>filter</code>，想要作用于类数组对象上，可以这样写：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">[].<span class="property">filter</span>.<span class="title function_">call</span>(item.<span class="property">parentElement</span>.<span class="property">children</span>, <span class="function"><span class="params">el</span> =&gt;</span> el !== item)</span><br></pre></td></tr></table></figure></div>

<p>这里 <code>item.parentElement.children</code> 返回的是元素 <code>item</code> 的父元素的所有子元素的集合，是一个类数组对象，为了对它进行 <code>filter</code> 的方法，可以利用 <code>call</code>，实现方法的借用，后面 <code>el =&gt; el !== item</code> 是原 <code>filter</code> 函数的参数，表示 <code>callback</code> 筛选条件。</p>
<h3 id="toggle"><a href="#toggle" class="headerlink" title="toggle"></a>toggle</h3><p>切换某元素的某个 <code>class</code> 的开关状态，若存在则移除它，若不存在则添加它。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">element.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;changed&quot;</span>, [<span class="literal">true</span>/<span class="literal">false</span>]);</span><br></pre></td></tr></table></figure></div>

<p>第二个参数可选，若 <code>true</code> 则强制添加，若 <code>false</code> 则强制删除。</p>
<h3 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect"></a>getBoundingClientRect</h3><p>是元素的一个方法，返回一个包含该元素信息的 <code>DOMRect</code> 对象。</p>
<p>提供以下属性：</p>
<ul>
<li>**<code>top</code>**：元素上边缘到视口上边缘的距离。</li>
<li>**<code>right</code>**：元素右边缘到视口左边缘的距离。</li>
<li>**<code>bottom</code>**：元素下边缘到视口上边缘的距离。</li>
<li>**<code>left</code>**：元素左边缘到视口左边缘的距离。</li>
<li>**<code>width</code>**：元素的宽度（相当于 <code>right - left</code>）。</li>
<li>**<code>height</code>**：元素的高度（相当于 <code>bottom - top</code>）。</li>
</ul>
<h1 id="异步-asynchronous"><a href="#异步-asynchronous" class="headerlink" title="异步(asynchronous)"></a>异步(asynchronous)</h1><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>一个函数接受另一个函数作为参数，并在进行一系列操作之后回调这个函数。</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="string">&quot;Data fetched&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 输出 &quot;Data fetched&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><code>Promise</code> 对象返回一个异步操作的最终完成&#x2F;失败及其结果值，它可以将一个操作异步化。</p>
<p>什么是异步？什么是同步？</p>
<p>正常来讲一个 javascript 程序是按照顺序执行的，上一个函数执行完之前，底下的函数只能干等着。</p>
<p>如果这是一个非常耗时的网络请求，我们完全可以一边执行请求，一边执行其它的代码，这就是异步，反之等待请求完成后再执行其它代码就是同步。</p>
<p>创建一个 <code>Promise</code> 对象：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 异步操作的代码</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;成功的结果&#x27;</span>); <span class="comment">// 异步操作成功时调用</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;失败的原因&#x27;</span>); <span class="comment">// 异步操作失败时调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p>一个 <code>Promise</code> 对象在被创建后里面的操作会立刻执行。</p>
<p>它有三种状态：</p>
<ul>
<li><code>pending</code></li>
<li><code>fulfilled</code></li>
<li><code>rejected</code></li>
</ul>
<p>比如我想实现两个异步操作都结束时将它们的结果值相加，那么可以使用 <code>Promise.all()</code> 函数，参数是一个 <code>Promise</code> 数组，当里面的 <code>Promise</code> 都成功时，返回一个数组，里面是各个 <code>Promise</code> 的结果值。</p>
<p>这样就可以让两个操作并行，节约时间。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">2</span>), <span class="number">20</span>));</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">5</span>), <span class="number">60</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a, b] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br></pre></td></tr></table></figure></div>

<p><a class="link"   href="https://leetcode.cn/problems/add-two-promises/description/?envType=study-plan-v2&envId=30-days-of-javascript" >Leetcode 例题<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>如果我想在超时之后返回 <code>reject</code> 并且终止进程防止内存泄漏，可以这样：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;                <span class="title function_">reject</span>(<span class="string">&quot;Time Limit Exceeded&quot;</span>);</span><br><span class="line">		&#125;, t);</span><br><span class="line">	<span class="title function_">fn</span>(...args).<span class="title function_">then</span>(resolve).<span class="title function_">catch</span>(reject).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="built_in">clearTimeout</span>(timeout));</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>还可以保证函数的正常运行，如果运行成功，那么 <code>.then(resolve</code>，否则就 <code>.catch(reject)</code>，并且最后结束这个 <code>timout</code>。</p>
<p><a class="link"   href="https://leetcode.cn/problems/promise-time-limit/description/?envType=study-plan-v2&envId=30-days-of-javascript" >Leetcode 例题<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h3><p><code>async</code> 用于声明一个异步函数，使它返回一个 <code>Promise</code> 对象。</p>
<p><code>await</code> 只能在 <code>async</code> 函数内部使用，用于等待一个 <code>Promise</code> 完成，并返回 <code>Promise</code> 的结果。</p>
<p>这样可以使我们可以以同步的方式处理异步代码。</p>
<p><strong>注意：</strong></p>
<p>如果需要在循环中使用异步操作，那么是不可以使用 <code>forEach</code> 或者 <code>map</code> 这种方法的，它不会等待 <code>await</code> 执行完，而是直接进入下一个循环。</p>
<p><strong>如何解决？</strong></p>
<p>使用 <code>for...of</code> 循环。</p>
<p><strong>如何让所有的异步操作并发执行呢？</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> promises = [</span><br><span class="line">		<span class="title function_">someAsyncOperation</span>(),</span><br><span class="line">		<span class="title function_">someAsyncOperation</span>(),</span><br><span class="line">		<span class="title function_">someAsyncOperation</span>()</span><br><span class="line">	];</span><br><span class="line">	<span class="keyword">for</span> <span class="title function_">await</span> (<span class="keyword">let</span> result <span class="keyword">of</span> promises);</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>promises</code> 中存储的是若干个 <code>Promise</code> 对象，这些对象在创建 <code>promises</code> 时即开始并发执行，用 <code>for await</code> 来依次等待它们完成（所有的 <code>Promise</code> 是同时运行的），这样就可以在它们都运行完成后退出循环进行下一步的操作。</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Day</span> &#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">day, date</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">day</span> = day;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">date</span> = date;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在 <code>constructor</code> 构造函数中，成员变量不需要显式声明，使用 <code>new Day(day, date)</code> 进行实例化。</p>
<h2 id="Extends"><a href="#Extends" class="headerlink" title="Extends"></a>Extends</h2><p>类之间可以继承，子类可以继承父类的功能也可以重写父类的方法。</p>
<p>使用在子类中使用 <code>super()</code> 调用父类的构造函数。</p>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(string);</span><br></pre></td></tr></table></figure></div>

<p>用于将 JSON 字符串转换为 JS 对象。</p>
<h2 id="stringify"><a href="#stringify" class="headerlink" title="stringify"></a>stringify</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br></pre></td></tr></table></figure></div>

<p>将对象转换为 JSON 字符串。</p>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="转换为-Object"><a href="#转换为-Object" class="headerlink" title="转换为 Object"></a>转换为 Object</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(map);</span><br></pre></td></tr></table></figure></div>

<h2 id="转换为-Map"><a href="#转换为-Map" class="headerlink" title="转换为 Map"></a>转换为 Map</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj); <span class="comment">// 转换为二维键值数组</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(temp)</span><br></pre></td></tr></table></figure></div>

<h1 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h1><h2 id="res"><a href="#res" class="headerlink" title="res"></a>res</h2><p>响应体，后端可以进行一些响应返回给前端。</p>
<p>常用：</p>
<ul>
<li><code>res.send()</code>：返回纯文本&#x2F; HTML 数据</li>
<li><code>res.json()</code>：将对象转化为 JSON 字符串并返回</li>
<li><code>res.status()</code>：设置 HTTP 状态码</li>
<li><code>res.sendFile()</code>：发送文件</li>
<li><code>res.setHeader()</code>：设置响应头</li>
<li><code>res.redirect()</code>：将客户端重定向到另一个 URL</li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Regex Note</title>
    <url>/23441a96.html</url>
    <content><![CDATA[<blockquote>
<p>regex</p>
</blockquote>
<p>推荐在线测试网站：<a class="link"   href="https://regex101.com/" >Link<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<ul>
<li><code>?</code> 代表前面这个字符可有可无<ul>
<li><code>used?</code> 匹配的是 <code>use</code> 和 <code>used</code>。</li>
</ul>
</li>
<li><code>*</code> 代表前面这个字符可以出现 0 次到无数次。<ul>
<li><code>ab*c</code> 可以匹配 <code>ac</code>，也可以匹配 <code>abbbbc</code>。</li>
</ul>
</li>
<li><code>+</code> 与 <code>*</code> 类似，但不可以出现 0 次。</li>
<li><code>&#123;x, y&#125;</code> 代表前面的字符出现 x 到 y 次，如果只出现 x 次省略 <code>,y</code> ，如果出现大于等于 x 次那么省略 <code>y</code>。</li>
<li>如果想要匹配多个字符，那么用括号包裹它们。</li>
<li><code>(|)</code> 是或运算符，需要用括号包裹。<ul>
<li><code>a (cat|dog)</code> 可以匹配 <code>a cat</code> 或者 <code>a dog</code>。</li>
</ul>
</li>
<li><code>[]</code> 里的字符代表匹配的选择范围。<ul>
<li>如 <code>[abc]</code> <code>[a-z]</code> <code>[a-zA-z0-9]</code>。</li>
</ul>
</li>
<li><code>[^]</code> 表示非。<ul>
<li>如 <code>[^0-9]</code> 表示所有的非数字字符。</li>
</ul>
</li>
<li><code>\d</code> 表示数字字符，等同于 <code>[0-9]</code>。</li>
<li><code>\w</code> 表示单词字符，所有的字母加下划线。</li>
<li><code>\s</code> 表示空白符，包含 <code>tab</code> 和换行符。</li>
<li><code>\D</code> 代表非数字字符，其它以此类推。</li>
<li><code>.</code> 代表任意字符（不包括换行符）。</li>
<li><code>^</code> 表示从行首开始匹配，<code>$</code> 表示从行尾开始匹配。<ul>
<li>如 <code>^a</code> 表示只匹配行首的 <code>a</code>，<code>a$</code> 只匹配行尾的 <code>a</code>。</li>
</ul>
</li>
<li><code>+?</code> 会将匹配模式由默认的尽可能多的匹配变成尽可能少的匹配。</li>
<li><code>\b</code> 表示单词字符的边界。</li>
</ul>
<p><strong>小例子：</strong></p>
<ul>
<li>匹配十六进制色值：<code>/#[a-fA-F0-9]&#123;6&#125;\b/gm</code></li>
<li>匹配 <code>IPV4</code> 地址：<code>/\b((25[0-5]|2[0-4]\d|[01]?\d\d?)\.)&#123;3&#125;(25[0-5]|2[0-4]\d|[01]?\d\d?)\b/gm</code></li>
<li>匹配 vue 指令：<code>/^v-([\w-]+)$/</code></li>
</ul>
]]></content>
      <categories>
        <category>Back-End</category>
      </categories>
      <tags>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript Note</title>
    <url>/a4a6c774.html</url>
    <content><![CDATA[<blockquote>
<p>越来越像 c++ 了</p>
</blockquote>
<p>它是 JavaScript 的一个超集。</p>
<p>经过编译后变成 JavaScript 才可以在浏览器中运行。</p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="自动识别类型"><a href="#自动识别类型" class="headerlink" title="自动识别类型"></a>自动识别类型</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line">num = <span class="string">&#x27;err&#x27;</span> <span class="comment">// error</span></span><br></pre></td></tr></table></figure></div>

<p>变量一经赋值，它的类型也就确定下来了，直接修改会报错。</p>
<h2 id="类型指定"><a href="#类型指定" class="headerlink" title="类型指定"></a>类型指定</h2><p>定义时我们便可以定义它的类型。</p>
<div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">numArr</span>: <span class="built_in">number</span>[]</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Arr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;</span><br><span class="line"><span class="comment">// equal</span></span><br></pre></td></tr></table></figure></div>

<h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> result = numArr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">result * <span class="number">5</span></span><br></pre></td></tr></table></figure></div>

<p>如果不加断言 <code>as number</code> 会导致错误，因为可能返回的值是 <code>undefined</code>，而 <code>undefined</code> 是不能进行数学运算的，如果我们确定它的值类型一定，便可以添加断言，这样就不会导致报错。</p>
<p>在 JavaScript  中，<code>undefined</code> 则会被当作 <code>NaN</code> 进行数学运算。</p>
<h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><ul>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>null</li>
<li>undefined</li>
<li>void<ul>
<li>值只有<code>undefined</code>，函数的类型</li>
</ul>
</li>
</ul>
<h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>如果一个值可能有多个类型，定义时使用 <code>|</code> 隔开即可。</p>
<div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">v</span>: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure></div>

<p><code>null</code> 值默认可以分配给任意类型，开启严格配置后，只可以分配给 <code>null</code> 类型，所以需要通过这种方式声明一下。</p>
<p>也可以用它来限制取值，如：</p>
<div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">v</span>: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span></span><br></pre></td></tr></table></figure></div>

<p>这样它就只能取这三个值。</p>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">t</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>, <span class="built_in">number</span>?] = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></div>

<p>类似于数组，预定类型。</p>
<p>如果该值可选，加个问号即可。</p>
<h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">My</span> &#123;</span><br><span class="line">	A,</span><br><span class="line">	B,</span><br><span class="line">	C</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">My</span>.<span class="property">A</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">My</span>[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></div>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">	<span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">Obj</span> = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Mytype</span> = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="title class_">Mytype</span></span><br></pre></td></tr></table></figure></div>

<h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: T): T[] &#123;</span><br><span class="line">	<span class="keyword">return</span> [a, b]</span><br><span class="line">&#125;</span><br><span class="line">fn&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span> (<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span> (<span class="params"><span class="attr">age</span>: <span class="built_in">number</span></span>): <span class="built_in">string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">helllo</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span> + value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其实只保留最后一行函数定义也没问题，这样的好处是 vsc 会提示你函数结构。</p>
<h2 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">	<span class="attr">prop1</span>: <span class="built_in">string</span></span><br><span class="line">	<span class="attr">prop2</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">	<span class="attr">prop3</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="类构造函数"><a href="#类构造函数" class="headerlink" title="类构造函数"></a>类构造函数</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span> &#123;</span><br><span class="line">	<span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">	<span class="attr">content</span>: <span class="built_in">string</span></span><br><span class="line">	<span class="title function_">constructor</span> (<span class="params"><span class="attr">title</span>: <span class="built_in">string</span>, <span class="attr">content</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">title</span> = title</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">content</span> = content</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="attr">_password</span>: <span class="built_in">string</span></span><br><span class="line">	<span class="keyword">get</span> <span class="title function_">password</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;*******&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">set</span> <span class="title function_">password</span>(<span class="params"><span class="attr">newPass</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">_password</span> = newPass</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> <span class="title class_">User</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(u.<span class="property">password</span>)</span><br><span class="line">u.<span class="property">password</span> = <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>可能不会被实例化，只是作为基类给其它类规范格式的。</p>
<div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">	<span class="keyword">abstract</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">	<span class="keyword">abstract</span> <span class="attr">color</span>: <span class="built_in">string</span></span><br><span class="line">	haha?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;cat&#x27;</span></span><br><span class="line">	<span class="attr">color</span>: <span class="string">&#x27;orange&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>抽象类中可以有抽象属性，这样被子类继承时子类必须实现抽象属性，而非抽象属性子类可以正常继承使用。</p>
<h2 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">	<span class="keyword">get</span> <span class="title function_">sound</span>(): <span class="built_in">string</span></span><br><span class="line">	<span class="title function_">makeSound</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="built_in">string</span> =<span class="string">&#x27;dog&#x27;</span></span><br><span class="line">	<span class="keyword">get</span> <span class="title function_">sound</span>() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以继承多个接口，逗号隔开即可，但不能继承多个类。</p>
<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt; &#123;</span><br><span class="line">	<span class="attr">value</span>: T</span><br><span class="line">	<span class="title function_">constructor</span> (<span class="params"><span class="attr">value</span>: T</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">do</span> (<span class="attr">input</span>: T): T &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">		<span class="keyword">return</span> input</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">My</span> = <span class="keyword">new</span> <span class="title class_">MyClass</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>与泛型函数类似。</p>
]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Configuration Diary</title>
    <url>/f24024d4.html</url>
    <content><![CDATA[<h1 id="Pre-Info"><a href="#Pre-Info" class="headerlink" title="Pre-Info"></a>Pre-Info</h1><p>一年前在移动硬盘上安装了 Ubuntu22.04，但也仅仅是安装，并没有使用，吃灰了几个月后被我清理。</p>
<p>最近有移动使用的需求，哪怕是在 100W PD充电的低功耗模式情况下，Windows11 的资源调度也是相当激进的，在同时打开 Edge、Vscode、Obsidian 和网易云音乐时风扇还是会转（图书馆里有点小吵），温度五六十度吧。</p>
<p>听说 Linux 负载小，那就换来试试，正好我也爱折腾这些。</p>
<p>于是三天过去了……</p>
<p>先看成果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202407191720315.webp"
                     
                ></p>
<p>在这个过程中，有几个能力是必不可少的：</p>
<ul>
<li>阅读文档</li>
<li>Google 英文搜索</li>
<li>ChatGPT 的辅助</li>
<li>看报错信息</li>
</ul>
<p>没办法，如此一个不算热门的领域，想要找到高质量且有体系的易懂的信息，很难很难。</p>
<p>最好的信息当属官方文档，当然全都是英文，需要较强的英文阅读能力。</p>
<p>文档不好啃，我有时候选择把它丢给 GPT 让它帮我分析然后通过文档回答我的问题。</p>
<p>其次中文语料的信息少得可怜，近年来中文互联网逐渐封闭化，越来越难以找到高质量的中文信息，之前全靠 CSDN，某乎，博客撑起一片天。用英文搜索的必要性日益显露。</p>
<p>最后就是看报错信息，日志之类的，大白话写得很清楚，就是全是英文的不好读，有问题也可以先去看看仓库的 Issue。</p>
<h1 id="Linux-Install"><a href="#Linux-Install" class="headerlink" title="Linux Install"></a>Linux Install</h1><blockquote>
<p>Ubuntu24.04 LTS</p>
</blockquote>
<p>准备一个 8GB 以上的 U盘，使用 rufus 制作启动盘。</p>
<p>在 BIOS 中改为以启动盘优先启动，这样就可以进入到 Ubuntu 的安装界面，接下去傻瓜操作即可。</p>
<p>分区手动配置：</p>
<p>正常来讲需要有这么几个分区：</p>
<ul>
<li><code>/</code> 根目录，相当于 C 盘。</li>
<li><code>/home</code>，相当于其它盘。</li>
<li><code>swap</code>，相当于虚拟内存。</li>
</ul>
<p>我的 RAM 是 16G，所以 <code>swap</code> 分区设置为 10G，<code>/</code> 设置 30G，<code>/home</code> 设置 60G，总共 100G。</p>
<p>但其实根本永不了这么多，<code>/home</code> 感觉 20～30G 就够用了。</p>
<p>听说现在 Linux 也可以安装 Steam 打游戏了，就是不知道兼容性怎么样。</p>
<p>震惊，预装 NVIDIA 显卡驱动！</p>
<blockquote>
<p>Linus 撤回了一个 Fu**</p>
</blockquote>
<h1 id="Apps-Install"><a href="#Apps-Install" class="headerlink" title="Apps Install"></a>Apps Install</h1><h2 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h2><p>Edge、Chrome 等浏览器不支持在 ROOT 用户下运行（出于安全考虑），我忘了我怎么解决这个问题了，没啥需求的话 FireFox、Opera 都挺好用的。</p>
<p>我尝试过的解决方向：</p>
<ul>
<li>按照网上教程修改配置文件 ❌</li>
<li>使用 Dev 版或者 Beta 版 ❌</li>
<li>创建其它用户，以非 ROOT 用户权限启动 ❓</li>
<li>把 <code>~/.config/microsoft-edge/</code> 下以 <code>singleton</code> 开头的文件删除 ❓</li>
<li>…</li>
</ul>
<p>反正最后解决了，stable 版的 Edge。</p>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p><a class="link"   href="https://obsidian.md/" >Obsidian<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> YYDS！</p>
<p>图床：<a class="link"   href="https://github.com/Molunerfinn/PicGo" >Picgo<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><code>.snap</code> 格式的文件这样安装：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> snap install --dangerous [file_name]</span><br></pre></td></tr></table></figure></div>

<p>Picgo 插件无法安装的话，可以手动安装，</p>
<p>在 <code>~/snap/picgo/current/.config/picgo</code> 目录下使用 <code>npm install [picgo-plugin-name]</code> 即可。</p>
<p>安装 <code>npm</code> 和 <code>nvm</code> 以及 <code>node.js</code> 请自行搜索。</p>
<h2 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h2><p>没有好用的 Linux 版本的网易云音乐，于是改用 Spotify.</p>
<p>Snap 商店里就能下（就是自带的那个应用商店）。</p>
<p>但是有非常好用的第三方播放器，强烈推荐！</p>
<p><a class="link"   href="https://github.com/qier222/YesPlayMusic" >YesPlayMusic<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="Dev"><a href="#Dev" class="headerlink" title="Dev"></a>Dev</h2><ol>
<li>VScode 一键同步</li>
<li>NeoVim</li>
</ol>
<h2 id="Chat"><a href="#Chat" class="headerlink" title="Chat"></a>Chat</h2><p><a class="link"   href="https://github.com/lovechoudoufu/wechat_for_linux" >Wechat 下载链接<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>QQ 官网上有。</p>
<h2 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h2><p>ThunderBird</p>
<p>snap 商店可以下。</p>
<h1 id="Beautify"><a href="#Beautify" class="headerlink" title="Beautify"></a>Beautify</h1><h2 id="rEFInd"><a href="#rEFInd" class="headerlink" title="rEFInd"></a>rEFInd</h2><p>这个很早之前就做过了，只不过一直只有孤零零的一个 Windows 系统，还有点影响开机速度（毕竟没得选）。</p>
<p>配置教程 B 站有详细教程：<a class="link"   href="https://www.bilibili.com/video/BV1714y1c78z/" >链接<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>安装好 Linux 后直接出来四个图标，其中需要删掉两个不需要的，所以我们先不能安装主题，在默认主题下按 <code>del</code> 可以删除不需要的图标（前提是你得知道你要留哪些，这个可以试试）。</p>
<h2 id="Grub"><a href="#Grub" class="headerlink" title="Grub"></a>Grub</h2><p>安装 Linux 附赠的引导，只不过默认很丑只是 DOS 命令行。</p>
<p>进入 Linux，打开这个<a class="link"   href="https://www.gnome-look.org/browse?cat=109&ord=rating" >链接<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，</p>
<p>琳琅满目的 Grub Theme，挑一个喜欢的配置一下就好。</p>
<p>推荐这个：<a class="link"   href="https://github.com/vinceliuice/grub2-themes" >链接<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>按照仓库的教程安装即可。</p>
<p>这里可以安装一个 Grub Customizer，把 Grub 里多余的选项删除，</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install grub-customizer</span><br></pre></td></tr></table></figure></div>

<p>这样的坏处就是如果出问题你只能通过 <code>c</code> 使用命令行进入恢复模式了（好处是好看）。</p>
<h2 id="Gnome-Tweaks"><a href="#Gnome-Tweaks" class="headerlink" title="Gnome Tweaks"></a>Gnome Tweaks</h2><p>引导美化完了接下来该美化系统了。</p>
<p>Ubuntu 默认的图形化界面是 Gnome，我们可以安装 Gnome-Tweaks 来调整它的外观，不过最新的版本这个也是预装的，中文名称叫“优化”。</p>
<p>打开以后就可以调整字体，图标，主题等了，注意先不要调整鼠标指针为它自带的一些主题，可能缺失了什么文件，一选它就出 BUG，无法进入 GUI，只能对着 Grub 的命令行界面苦苦找寻解决方法一遍遍地试。</p>
<p>解决完这个问题以后我第一时间就去找了个喜欢的鼠标指针安装上。</p>
<h2 id="Cursor"><a href="#Cursor" class="headerlink" title="Cursor"></a>Cursor</h2><p>打开这个<a class="link"   href="https://www.gnome-look.org/browse?cat=107&ord=rating" >链接<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>是的没错还是这个网站，之后我们也会经常用到它。</p>
<p>下载后解压（图形界面双击压缩包就可以解压，再也不怕记错命令了）。</p>
<p>然后移动到 <code>~/.local/share/icons/</code> 目录下，然后在你的 <code>Tweaks</code> 里就可以看见它了。（看不到就重新打开一遍）</p>
<p>Icons 等其它选项也是同理，不过我没改，默认的都挺好。</p>
<h2 id="Dock"><a href="#Dock" class="headerlink" title="Dock"></a>Dock</h2><p>默认的底部 Dock 有点太丑了，使用 Dock 作为替代：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install plank</span><br></pre></td></tr></table></figure></div>

<p>安装后打开即可使用。</p>
<p>按住 <code>ctrl</code> 右键底部 Dock 中的图标，可以进入设置界面详细修改。</p>
<p>小部件如果不小心添加了，可以把它往上拖，它自己就没了。（当时找了半天也不知道怎么去掉）</p>
<p>此时 Plank 和 Ubuntu 自带的 Dock 会同时存在，怎么关掉自带的呢？</p>
<p>安装插件管理器（之后也要用到）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install gnome-shell-extension-manager</span><br></pre></td></tr></table></figure></div>

<p>关掉 Ubuntu Dock 即可。</p>
<p>最后，在 Tweaks 中将 <code>Plank</code> 设置为开机自启。</p>
<h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>默认的桌面主题中规中距，并不算好看。</p>
<p>在刚才安装的插件管理器中安装插件 <code>User Themes</code>。</p>
<p>打开<a class="link"   href="https://www.gnome-look.org/browse?cat=134&ord=rating" >链接<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>选一个喜欢的主题，下载，解压。</p>
<p>把主题文件复制到 <code>/home/fallingsakura/.local/share/themes/</code> 即可。</p>
<p><code>themes</code> 文件夹需要自己创建。</p>
<p>此时在 Tweaks 的外观中多出了一个 <code>shell</code> 选项，改为你想要的主题即可。</p>
<h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><p>炫酷的窗口动效！</p>
<p>在插件管理器中安装两个插件：</p>
<ul>
<li>Compiz alike magic lamp effect：暴风吸入式窗口最小化</li>
<li>Compiz windows effect：Q弹的窗口</li>
</ul>
<p>具体配置自己调整即可。</p>
<h2 id="Widgets"><a href="#Widgets" class="headerlink" title="Widgets"></a>Widgets</h2><p>桌面是很好看，但是感觉空荡荡的，加点小组件让它更好看吧！</p>
<p>效果图：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/FallingSakura/Source@main/img/202408191233291.webp"
                     
                ></p>
<p>（我的屏幕缩放比例比较低所以显得组件很小）</p>
<p>详细步骤看<a class="link"   href="https://blog.csdn.net/weixin_43268374/article/details/135755979" >这里<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="Zsh"><a href="#Zsh" class="headerlink" title="Zsh"></a>Zsh</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202407191727296.webp"
                      alt="image.png"
                ></p>
<p>美化命令行界面。</p>
<p>换为 zsh 命令行的 ohmyzsh 框架的 powerlevel10k 主题。</p>
<p>这几个关键词一艘教程一大把，在这里不过多赘述。</p>
<p>提几个注意事项：</p>
<ol>
<li>安装 <a class="link"   href="https://www.nerdfonts.com/" >Nerd 系列字体<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</li>
</ol>
<p>选一个自己喜欢的，安装。</p>
<p>然后在终端窗口右上角选择首选项，在配置栏中自己新建一个配置，把字体改为 Nerd 字体，否则一些图标不能正常显示。</p>
<p>这个在后续美化 NeoVim 的过程中也会用到，后面不再赘述。</p>
<ol start="2">
<li>切换系统语言为英文</li>
</ol>
<p>非必要，不知道为什么在中文语言系统下图形的 Unicode 编码渲染有问题，导致圆角、尖角等样式显示非常怪异（错位），最后切换语言解决了。</p>
<p>改变行高和字符宽度也会影响这个，看着调吧。</p>
<h2 id="NeoVim"><a href="#NeoVim" class="headerlink" title="NeoVim"></a>NeoVim</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202407191724952.webp"
                      alt="image.png"
                ></p>
<p>在 Ubuntu 24.04 为系统自带。</p>
<p>推荐 B 站<a class="link"   href="https://www.bilibili.com/video/BV1Td4y1578E/" >蛋老师的视频<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>从美化到配置一条龙服务，全程干货。</p>
<p>在他的基础上我修改了一些我自己需要的配置，比如不要烦人的 <code>swap file</code>、编译运行一些语言的快捷指令、<code>ctrl+w</code> 快捷关闭缓冲区等等。</p>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- options.lua</span></span><br><span class="line"><span class="keyword">local</span> opt = vim.opt</span><br><span class="line"></span><br><span class="line"><span class="comment">-- line number</span></span><br><span class="line">opt.relativenumber = <span class="literal">true</span></span><br><span class="line">opt.number = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- tab</span></span><br><span class="line">opt.tabstop = <span class="number">2</span></span><br><span class="line">opt.shiftwidth = <span class="number">2</span></span><br><span class="line">opt.expandtab = <span class="literal">true</span></span><br><span class="line">opt.autoindent = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--no-wrap</span></span><br><span class="line">opt.<span class="built_in">wrap</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--cursorline</span></span><br><span class="line">opt.cursorline = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--mouse</span></span><br><span class="line">opt.mouse:append(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--clipboard</span></span><br><span class="line">opt.clipboard:append(<span class="string">&quot;unnamedplus&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--newwindows</span></span><br><span class="line">opt.splitright = <span class="literal">true</span></span><br><span class="line">opt.splitbelow = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--search</span></span><br><span class="line">opt.ignorecase = <span class="literal">true</span></span><br><span class="line">opt.smartcase = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line">opt.termguicolors = <span class="literal">true</span></span><br><span class="line">opt.signcolumn = <span class="string">&quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- theme</span></span><br><span class="line">vim.cmd<span class="string">[[colorscheme catppuccin-frappe]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- foldenable</span></span><br><span class="line">vim.o.foldenable = <span class="literal">true</span></span><br><span class="line">vim.o.foldmethod = <span class="string">&#x27;manual&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- delete swapfile (anoying)</span></span><br><span class="line">vim.o.swapfile = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Compile &amp; Run Cpp</span></span><br><span class="line">vim.api.nvim_command(<span class="string">&#x27;command! CompileCpp !g++ % -o %:r&#x27;</span>)</span><br><span class="line">vim.api.nvim_command(<span class="string">&#x27;command! RunCpp !%:r&#x27;</span>)</span><br><span class="line">vim.api.nvim_command(<span class="string">&#x27;command! RunJs !node %&#x27;</span>)</span><br><span class="line">vim.api.nvim_command(<span class="string">&#x27;command! RunPy !python3 %&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- keymaps.lua </span></span><br><span class="line">vim.g.mapleader = <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="keyword">local</span> keymap = vim.keymap</span><br><span class="line"></span><br><span class="line">keymap.set(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;:m &#x27;&gt;+1&lt;CR&gt;gv=gv&quot;</span>)</span><br><span class="line">keymap.set(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;:m &#x27;&lt;-2&lt;CR&gt;gv=gv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- split vertical / horizonal</span></span><br><span class="line">keymap.set(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;sv&quot;</span>, <span class="string">&quot;&lt;C-w&gt;v&quot;</span>)</span><br><span class="line">keymap.set(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;sh&quot;</span>, <span class="string">&quot;&lt;C-w&gt;s&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- cancel hightlight</span></span><br><span class="line">keymap.set(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;ch&quot;</span>, <span class="string">&quot;:nohl&lt;CR&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- plugins</span></span><br><span class="line"><span class="comment">-- nvim-tree</span></span><br><span class="line">keymap.set(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;e&quot;</span>, <span class="string">&quot;:NvimTreeToggle&lt;CR&gt;&quot;</span>)</span><br><span class="line"><span class="comment">--buffer</span></span><br><span class="line">keymap.set(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gt&quot;</span>, <span class="string">&quot;:bn&lt;CR&gt;&quot;</span>)</span><br><span class="line">keymap.set(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gT&quot;</span>, <span class="string">&quot;:bp&lt;CR&gt;&quot;</span>)</span><br><span class="line">keymap.set(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;A-w&gt;&quot;</span>, <span class="string">&quot;:w | :bd | :bprevious&lt;CR&gt;&quot;</span>)</span><br><span class="line">keymap.set(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-s&gt;&quot;</span>, <span class="string">&quot;:w&lt;CR&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">keymap.set(<span class="string">&quot;t&quot;</span>, <span class="string">&#x27;&lt;Esc&gt;&#x27;</span>, <span class="string">&#x27;&lt;C-\\&gt;&lt;C-n&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>各种语言的 LSP 也搞了好久，这方面的内容还没人做，我也只是略懂：</p>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- lsp.lua</span></span><br><span class="line"><span class="keyword">local</span> servers = &#123;</span><br><span class="line">  <span class="string">&quot;lua_ls&quot;</span>,</span><br><span class="line">  <span class="string">&quot;volar&quot;</span>,</span><br><span class="line">  <span class="string">&quot;html&quot;</span>,</span><br><span class="line">  <span class="string">&quot;tsserver&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cssls&quot;</span>,</span><br><span class="line">  <span class="string">&quot;clangd&quot;</span>,</span><br><span class="line">  <span class="string">&quot;vuels&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pyright&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pylsp&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;mason&quot;</span>).setup(&#123;</span><br><span class="line">  ui = &#123;</span><br><span class="line">      icons = &#123;</span><br><span class="line">          package_installed = <span class="string">&quot;✓&quot;</span>,</span><br><span class="line">          package_pending = <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">          package_uninstalled = <span class="string">&quot;✗&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;mason-lspconfig&quot;</span>).setup(&#123;</span><br><span class="line">  <span class="comment">-- 确保安装，根据需要填写</span></span><br><span class="line">  ensure_installed = servers,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> capabilities = <span class="built_in">require</span>(<span class="string">&#x27;cmp_nvim_lsp&#x27;</span>).default_capabilities()</span><br><span class="line"><span class="keyword">local</span> lspconfig = <span class="built_in">require</span>(<span class="string">&quot;lspconfig&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- lspconfig.lua_ls.setup &#123;</span></span><br><span class="line"><span class="comment">--   capabilities = capabilities,</span></span><br><span class="line"><span class="comment">-- &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, lsp <span class="keyword">in</span> <span class="built_in">ipairs</span>(servers) <span class="keyword">do</span></span><br><span class="line">  lspconfig[lsp].setup &#123;</span><br><span class="line">    capabilities = capabilities,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 防止 lua 报警告，看着烦人</span></span><br><span class="line">lspconfig.lua_ls.setup &#123;</span><br><span class="line">  settings = &#123;</span><br><span class="line">    Lua = &#123;</span><br><span class="line">      diagnostics = &#123; globals = &#123; <span class="string">&#x27;vim&#x27;</span> &#125;, &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>顺便学了一下 <code>lua</code>（</p>
<hr>
<p>NeoVim 中，使用 <code>:term</code> 即可进入终端模式，这是 Vim 所没有的。</p>
<p>退出终端模式原来是要 <code>ctrl+\</code> 然后 <code>ctrl+n</code>，嫌麻烦改成 ESC 了。</p>
<hr>
<p>建议全局将 Caps-Lock 和 ESC 交换，这个在 Tweaks 的键盘中，选额外设置，把 Caps-Lock 的行为中改为“交换 ESC 和 Caps-Lock“即可。</p>
<p>这个在 Vscode 的 Vim 插件中有点 BUG，需要先把全局键换回来在 VScode 中把快捷键改一下再换回去（不然在 VScode 里，点击改键，弹出框中你的 Caps-Lock 是 ESC，你的 ESC 还是 ESC，改不了一点）。</p>
<hr>
<p>有人要问了，既然 VScode 那么好用，IDE 也是现成的，甚至配置好的 Vim 也有现成的，何苦自己搞一个这么麻烦呢？</p>
<p>因为我随时可以修改它。</p>
<p>这是我的配置，独属于我的高度可定制化的配置，它是独一无二的。</p>
<p>无论是软件，还是系统，甚至是硬件。</p>
<p>最后是我这个人。</p>
<h1 id="Disk-Bug"><a href="#Disk-Bug" class="headerlink" title="Disk Bug"></a>Disk Bug</h1><p>可能会遇到插入移动硬盘无法挂载的问题，这个很好解决，在自带的硬盘管理中更改对应分区的挂载选项，取消默认的配置，自定义手动挂载即可。</p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>没有总结，经过以上，你已经可以快乐地使用 Linux 进行日常使用和开发了，资源调度和占用真的很少，笔记本风扇几乎就没转过了。</p>
<p>很流畅，UI 很好看，喜欢。</p>
<p>Win11 以后就是专门拿来打游戏和做视频做渲染用的了。</p>
<p>以后看看把 Blender 和 Unity 也搬到 Linux 里。</p>
<p>有点想法再整一个 Arch Linux.</p>
<p>已经开始感觉头秃了。</p>
<p>To Be Continued…</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim Note</title>
    <url>/d32595a8.html</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small info">
    <p>本文使用 Obsidian 的 Vim 模式写作。</p>

  </div>

<h2 id="什么是-Vim"><a href="#什么是-Vim" class="headerlink" title="什么是 Vim"></a>什么是 Vim</h2><blockquote>
<p>Vim是一个类似于<a class="link"   href="https://baike.baidu.com/item/Vi/5043202?fromModule=lemma_inlink" >Vi<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>的高度可定制的<a class="link"   href="https://baike.baidu.com/item/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/8853160?fromModule=lemma_inlink" >文本编辑器<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，在Vi的基础上改进和增加了很多特性。Vim是<a class="link"   href="https://baike.baidu.com/item/%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6/405190?fromModule=lemma_inlink" >自由软件<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999 年<a class="link"   href="https://baike.baidu.com/item/Emacs/0?fromModule=lemma_inlink" >Emacs<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了<a class="link"   href="https://baike.baidu.com/item/Slashdot/1329225?fromModule=lemma_inlink" >Slashdot<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> Beanie的最佳<a class="link"   href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81/114160?fromModule=lemma_inlink" >开放源代码<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>文本编辑器大奖，又将Emacs推至二线。</p>
</blockquote>
<p>最近在学 Linux，不可避免地需要使用 Vim 进行一些代码编辑（Linux 系统自带的文本编辑器）。</p>
<p>感叹一下创造 Vim 的人的智慧。</p>
<p>鼠标是什么东西，我不知道。</p>
<p>码字效率++</p>
<p><a class="link"   href="https://vim.nauxscript.com/" >一个比较不错的教程文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="界面-移动"><a href="#界面-移动" class="headerlink" title="界面&#x2F;移动"></a>界面&#x2F;移动</h2><table>
<thead>
<tr>
<th align="center">Key</th>
<th align="center">Function</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>h</code></td>
<td align="center">Left</td>
</tr>
<tr>
<td align="center"><code>j</code></td>
<td align="center">Down</td>
</tr>
<tr>
<td align="center"><code>k</code></td>
<td align="center">UP</td>
</tr>
<tr>
<td align="center"><code>l</code></td>
<td align="center">Right</td>
</tr>
<tr>
<td align="center"><code>ctrl + y</code></td>
<td align="center">上一行</td>
</tr>
<tr>
<td align="center"><code>ctrl + e</code></td>
<td align="center">下一行</td>
</tr>
<tr>
<td align="center"><code>ctrl + u</code></td>
<td align="center">上半页（up）</td>
</tr>
<tr>
<td align="center"><code>ctrl + d</code></td>
<td align="center">下半页（down）</td>
</tr>
<tr>
<td align="center"><code>ctrl + b</code></td>
<td align="center">上一页（back）</td>
</tr>
<tr>
<td align="center"><code>ctrl + f</code></td>
<td align="center">下一页（forward）</td>
</tr>
<tr>
<td align="center"><code>H</code></td>
<td align="center">视口开头（Head）</td>
</tr>
<tr>
<td align="center"><code>M</code></td>
<td align="center">视口中央（Middle）</td>
</tr>
<tr>
<td align="center"><code>L</code></td>
<td align="center">视口结尾（Last）</td>
</tr>
<tr>
<td align="center"><code>G（]]）</code></td>
<td align="center">文件结尾</td>
</tr>
<tr>
<td align="center"><code>gg（[[）</code></td>
<td align="center">文件开头</td>
</tr>
<tr>
<td align="center"><code>x + G</code></td>
<td align="center">第 x 行</td>
</tr>
</tbody></table>
<h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><table>
<thead>
<tr>
<th align="center">Key</th>
<th align="center">Function</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>$</code></td>
<td align="center">行尾</td>
</tr>
<tr>
<td align="center"><code>^</code></td>
<td align="center">行首</td>
</tr>
<tr>
<td align="center"><code>0</code></td>
<td align="center">行最开头</td>
</tr>
<tr>
<td align="center"><code>w</code></td>
<td align="center">下一个单词的头部（word）</td>
</tr>
<tr>
<td align="center"><code>e</code></td>
<td align="center">下一个单词的尾部（end）</td>
</tr>
<tr>
<td align="center"><code>b</code></td>
<td align="center">上一个单词头部</td>
</tr>
<tr>
<td align="center"><code>ge</code></td>
<td align="center">上一个单词尾部</td>
</tr>
<tr>
<td align="center"><code>f + x</code></td>
<td align="center">当前行向后查找字符 x（选择 x）</td>
</tr>
<tr>
<td align="center"><code>3 + f + x</code></td>
<td align="center">当前行向后查找第三个字符 x</td>
</tr>
<tr>
<td align="center"><code>F + x</code></td>
<td align="center">当前行向前查找字符 x</td>
</tr>
<tr>
<td align="center"><code>t + x</code></td>
<td align="center">当前行向后查找字符 x（选择 x 前一个字符）</td>
</tr>
<tr>
<td align="center"><code>T + x</code></td>
<td align="center">当前行向前查找字符 x（选择 x 后一个字符）</td>
</tr>
<tr>
<td align="center"><code>（/）</code></td>
<td align="center">当前句子的首&#x2F;尾</td>
</tr>
<tr>
<td align="center"><code>&#123;/&#125;</code></td>
<td align="center">上&#x2F;下一个空行</td>
</tr>
<tr>
<td align="center"><code>%</code></td>
<td align="center">配对的括号</td>
</tr>
<tr>
<td align="center"><code>*</code></td>
<td align="center">跳转到与当前光标下单词匹配的下一个单词</td>
</tr>
<tr>
<td align="center"><code>#</code></td>
<td align="center">跳转到与当前光标下单词匹配的上一个单词</td>
</tr>
<tr>
<td align="center"><code>g + t</code></td>
<td align="center">下一个标签页</td>
</tr>
<tr>
<td align="center"><code>g + T</code></td>
<td align="center">上一个标签页</td>
</tr>
<tr>
<td align="center"><code>x + g + t</code></td>
<td align="center">第 x 个标签页</td>
</tr>
</tbody></table>
<h2 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h2><blockquote>
<p>一般而言数字加对应操作即将该操作重复多少次。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Key</th>
<th align="center">Function</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>v</code></td>
<td align="center">选择</td>
</tr>
<tr>
<td align="center"><code>ctrl + v</code></td>
<td align="center">块状选择</td>
</tr>
<tr>
<td align="center"><code>shift + v</code></td>
<td align="center">行块选择</td>
</tr>
<tr>
<td align="center"><code>y</code></td>
<td align="center">复制</td>
</tr>
<tr>
<td align="center"><code>yy（Y）</code></td>
<td align="center">复制当前行</td>
</tr>
<tr>
<td align="center"><code>p</code></td>
<td align="center">粘贴（paste）到前面</td>
</tr>
<tr>
<td align="center"><code>P</code></td>
<td align="center">粘贴到后面</td>
</tr>
<tr>
<td align="center"><code>x</code></td>
<td align="center">删除（Backspace）</td>
</tr>
<tr>
<td align="center"><code>X</code></td>
<td align="center">删除（Delete）</td>
</tr>
<tr>
<td align="center"><code>&quot;_x</code></td>
<td align="center">删除，切不放入缓冲区</td>
</tr>
<tr>
<td align="center"><code>d + w</code></td>
<td align="center">删除当前词</td>
</tr>
<tr>
<td align="center"><code>d + 3 + w</code></td>
<td align="center">删除当前三个词</td>
</tr>
<tr>
<td align="center"><code>d + f + x</code></td>
<td align="center">删到当前行的 x 处（包括 x）</td>
</tr>
<tr>
<td align="center"><code>dd</code></td>
<td align="center">删除当前行</td>
</tr>
<tr>
<td align="center"><code>d + t + x</code></td>
<td align="center">删到当前行的 x 前一个字符处（不包括 x）</td>
</tr>
<tr>
<td align="center"><code>u</code></td>
<td align="center">撤销（undo）</td>
</tr>
<tr>
<td align="center"><code>ctrl + r</code></td>
<td align="center">重做</td>
</tr>
<tr>
<td align="center"><code>J</code></td>
<td align="center">合并当前行及下一行</td>
</tr>
</tbody></table>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><blockquote>
<p>按下后进入输入模式。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Key</th>
<th align="center">Function</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>i</code></td>
<td align="center">选择字符的前一位（insert）</td>
</tr>
<tr>
<td align="center"><code>I</code></td>
<td align="center">行首</td>
</tr>
<tr>
<td align="center"><code>a</code></td>
<td align="center">选择字符的后一位（append）</td>
</tr>
<tr>
<td align="center"><code>A</code></td>
<td align="center">行尾</td>
</tr>
<tr>
<td align="center"><code>o</code></td>
<td align="center">向下新建一行</td>
</tr>
<tr>
<td align="center"><code>O</code></td>
<td align="center">向上新建一行</td>
</tr>
<tr>
<td align="center"><code>s</code></td>
<td align="center">删除所选</td>
</tr>
<tr>
<td align="center"><code>S</code></td>
<td align="center">删除当前行</td>
</tr>
<tr>
<td align="center"><code>c + 2 + l</code></td>
<td align="center">删除右边的两个字符</td>
</tr>
<tr>
<td align="center"><code>c + w</code></td>
<td align="center">删除当前词的光标及其右部分</td>
</tr>
</tbody></table>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><table>
<thead>
<tr>
<th align="center">Key</th>
<th align="center">Function</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>:q</code></td>
<td align="center">退出</td>
</tr>
<tr>
<td align="center"><code>:w</code></td>
<td align="center">保存</td>
</tr>
<tr>
<td align="center"><code>:wq</code></td>
<td align="center">保存并退出</td>
</tr>
<tr>
<td align="center"><code>/ + str</code></td>
<td align="center">从当前位置向后搜索字符串 str</td>
</tr>
<tr>
<td align="center"><code>? + str</code></td>
<td align="center">从当前位置向前搜索字符串 str</td>
</tr>
<tr>
<td align="center"><code>n</code></td>
<td align="center">下一个</td>
</tr>
<tr>
<td align="center"><code>N</code></td>
<td align="center">上一个</td>
</tr>
<tr>
<td align="center"><code>:s/str1/str2/g</code>（<code>/</code> 分割或者 <code>#</code> 分割）</td>
<td align="center">当前行的所有 str1 替换为 str2</td>
</tr>
<tr>
<td align="center"><code>:%s/str1/str2/g</code></td>
<td align="center">文件中所有的 str1 替换为 str2</td>
</tr>
<tr>
<td align="center"><code>:10,20s/str1/str2/g</code></td>
<td align="center">10 到 20 行所有的 str1 替换为 str2</td>
</tr>
<tr>
<td align="center"><code>:.,+10s/str1/str2/g</code></td>
<td align="center">当前行与接下来 10 行 所有的 str1 替换为 str2</td>
</tr>
<tr>
<td align="center"><code>.</code></td>
<td align="center">重复上一个操作</td>
</tr>
<tr>
<td align="center"><code>~</code></td>
<td align="center">切换所选字母的大小写</td>
</tr>
</tbody></table>
<p>替换的 <code>/g</code> 为<strong>替换标志</strong>，代表所有（global），可以为空，那么就是从光标开始的第一次出现。<code>/i</code> 表示不区分大小写，<code>/I</code> 表示区分大小写。<code>/c</code> 表示需要确认。这些可以自由组合，比如 <code>/gci</code>。</p>
<h2 id="一图总结"><a href="#一图总结" class="headerlink" title="一图总结"></a>一图总结</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://falling-sakura1-1316699389.cos.ap-nanjing.myqcloud.com/image/202405181708942.webp"
                      alt="|600"
                ></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>用 Vim 写 Markdown 并且还是中文其实真的很鸡肋。</p>
<p>中英输入法不断切换才能正常使用命令。</p>
<p>总结了一些我初学 Vim 常用的命令。</p>
<p>纸上得来终觉浅，绝知此事要躬行。</p>
<p>看不懂的地方就试试，很好理解。</p>
<p>希望对你有帮助。</p>
<p>🔚</p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Note</title>
    <url>/9f08e17f.html</url>
    <content><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><blockquote>
<p><a class="link"   href="https://cn.vuejs.org/" >Vue.js 中文文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><blockquote>
<p>什么是 API ？</p>
<p>API（<strong>Application Programming Interface</strong>，应用程序接口）是一组定义和协议，用于构建和集成软件应用程序。API 允许不同软件系统之间进行通信和数据交换。通过使用 API，开发者可以利用现有的<strong>功能</strong>，而无需从头开始编写代码。</p>
</blockquote>
<h3 id="选项式-API"><a href="#选项式-API" class="headerlink" title="选项式 API"></a>选项式 API</h3><p>选项API是Vue 2中使用的传统方法，通过在组件对象中定义各种选项来组织组件逻辑，如<code>data</code>、<code>methods</code>、<code>computed</code>、<code>watch</code>等。</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">count</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Count changed from <span class="subst">$&#123;oldValue&#125;</span> to <span class="subst">$&#123;newValue&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h3 id="组合式-API"><a href="#组合式-API" class="headerlink" title="组合式 API"></a>组合式 API</h3><p>组合式API是Vue 3中引入的新特性，提供了一种更灵活的方式来组织和复用组件逻辑。通过使用<code>setup</code>函数和组合函数（Composition Functions），可以将逻辑分块，便于复用和测试。</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      count.<span class="property">value</span>++;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Count changed from <span class="subst">$&#123;oldValue&#125;</span> to <span class="subst">$&#123;newValue&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      increment,</span><br><span class="line">      doubleCount</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h2><p>响应式（reactivity）是指系统能够自动监测数据的变化并做出相应的反应。例如，当数据变化时，Vue 会自动重新渲染相关的 DOM 元素，以确保用户界面始终与数据保持同步。这种能力是 Vue 的核心特性之一，使得开发过程更加简洁和高效。</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;scirpt setup&gt;</span><br><span class="line">// JS</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">// HTML</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">// CSS</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<p>每一个 <code>.vue</code> 文件是一个组件，不同的组件拼接成一个网页应用。</p>
<p>里面有三部分，分别是我们熟悉的 <code>HTML CSS JS</code>。</p>
<p>在之前的写法中，我们需要告诉 Vue 这是个组件以及定义组件逻辑的地方，如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">	setup() &#123;</span><br><span class="line">	//</span><br><span class="line">	//</span><br><span class="line">	//</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>setup</code> 用于初始化组件的逻辑、状态、数据，返回值将给模板使用。</p>
<p>但在 Vue3 中，我们有更方便的定义数据和方法的方式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>这样的写法就方便许多。</p>
<p>当我们想在某一个 <code>.vue</code> 文件中导入其它组件时，这样写：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;name&#125; form &#x27;&#123;path&#125;&#x27;</span><br></pre></td></tr></table></figure></div>

<p><code>&#123;name&#125;</code> 是组件的名字，可以任意取，<code>&#39;&#123;path&#125;&#39;</code> 是一个字符串，代表组件所在路径。</p>
<p>使用时，在 <code>&lt;template&gt;</code> 中使用 <code>&lt;&#123;name&#125;&gt;&lt;/&#123;name&#125;&gt;</code> 即可，像是你自定义了一个新的 HTML 标签。</p>
<p>当我们只想给 CSS 添加到当前组件时，可以给 <code>&lt;style&gt;</code> 添加一个属性 <code>scoped</code>。</p>
<h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>在 <code>script</code> 中，创建变量需要先引入 <code>ref/reactive</code> API。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref, reactive &#125; from &#x27;vue&#x27;</span><br></pre></td></tr></table></figure></div>

<p>然后创建变量：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const str = ref()</span><br></pre></td></tr></table></figure></div>

<p><code>ref()</code> 内是变量值，可以是字符串、数组、数字、对象等等。</p>
<p>返回的是一个带有 <code>value</code> 属性的对象。</p>
<p>在 <code>script</code> 内访问变量值时，需要使用 <code>var.value</code>，而在 <code>template</code> 中访问变量值时，只需要 <code>var</code>，比如一个标题可以是 <code>&lt;h2&gt;&#123;&#123; str &#125;&#125;&lt;/h2&gt;</code>。这样标题的内容就可以随着变量的变化而变化。</p>
<p><code>ref</code> 创建的是单一的<strong>值</strong>，而 <code>reactive</code> 创建的是更为复杂的深度响应式<strong>对象</strong>，里面有很多键值对。</p>
<p>而由于返回的是一个对象，所以哪怕这个变量在定义时为 <code>const</code>，你依然可以修改它的 <code>value</code>。</p>
<p>如果想要创建一个常量的话，可以使用 <code>ref(Object.freeze(&#123;value&#125;))</code></p>
<p>也可以使用 <code>computed</code> API，它可以用于创建一个计算属性，计算属性的值会自动缓存，只有它里面的变量发生变化时才会重新计算，那么我们只需要让里面没有变量就可以实现返回一个常量。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const computeValue = computed(() =&gt; &#x27;This is a computed constant&#x27;);</span><br></pre></td></tr></table></figure></div>

<h2 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; watch &#125; from &#x27;vue&#x27;;</span><br></pre></td></tr></table></figure></div>

<p><code>watch()</code> 是一个方法，第一个参数是监听的变量，第二个参数是执行的函数。</p>
<p>当这个变量的值发生变化时，函数就会执行一次。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch(object, add(oldValue, newValue), &#123; &#125;)</span><br></pre></td></tr></table></figure></div>

<p>同时这个执行的函数可以传入两个参数，一个是监听得到的新值，另一个是旧值。</p>
<p>监听的可以是普通响应式变量（ref），也可以是计算属性（computed），也可以是一个 <code>getter</code> 函数用于监听复杂的表达式，也可以监听多个值，打包成一个数组即可。</p>
<p>当监听的元素为一个对象时，修改对象中的某一个值，并不会触发监听函数。</p>
<p>如果想监听对象中的值，可以再加入一个参数<strong>选项对象</strong>：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch(object, add(oldValue, newValue), &#123; deep: true &#125;)</span><br></pre></td></tr></table></figure></div>

<p>一个对象 <code>&#123; deep: true &#125;</code>，此为深度监听。</p>
<p>选项对象还有的属性是：</p>
<ul>
<li><code>immediate</code>：在监听器初始化时就会执行一次回调函数，默认为 <code>false</code></li>
<li><code>flush</code>：执行回调函数的时机，可以是如下值：<ul>
<li><code>&quot;pre&quot;</code>：在视图更新之前调用（默认值）。</li>
<li><code>&quot;post&quot;</code>：在视图更新之后调用。</li>
<li><code>&quot;sync&quot;</code>：同步执行回调。</li>
</ul>
</li>
</ul>
<h2 id="defineProps"><a href="#defineProps" class="headerlink" title="defineProps"></a>defineProps</h2><p><code>defineProps</code> 是一个函数，用于声明当前组件接收的 props。它返回一个包含所有 props 的对象，可以在组件的逻辑中使用。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; defineProps &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps([&#x27;name&#x27;]);</span><br></pre></td></tr></table></figure></div>

<p>函数的参数是一个字符串数组，里面的字符串就是可以接收的 props，可以让<strong>父组件</strong>（调用组件的组件）通过属性将属性值传递给<strong>子组件</strong>（被调用的组件）的 props 中。</p>
<p>也可以接收一个对象，对象里可以详细配置 prop 的默认值，类型和验证等其它选项。</p>
<p>子组件调用这个值，通过 <code>&#123;&#123; props.name &#125;&#125;</code> 即可。</p>
<p>举例：</p>
<ul>
<li>子组件：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">...</span><br><span class="line">const props = defineProps([&#x27;text&#x27;]);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h2&gt;&#123;&#123; props.text &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>父组件：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Mybutton text=&quot;Title&quot;&gt;&lt;/Mybutton&gt;</span><br></pre></td></tr></table></figure></div>

<p>这样，父组件的数据就传递到子组件中了。</p>
<h2 id="defineEmits"><a href="#defineEmits" class="headerlink" title="defineEmits"></a>defineEmits</h2><p>在 Vue 3 中，<code>defineEmits</code> 是一个组合式 API，用于在组件中定义可以触发的事件。其参数是一个<strong>数组</strong>，包含了<strong>该组件可以触发的事件名称</strong>，返回值是一个函数，用于触发事件。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const emit = defineEmits([&#x27;ok&#x27;]);</span><br></pre></td></tr></table></figure></div>

<p>而 <code>emit</code> 函数的第一个参数表示触发的事件（这个事件必须是<strong>可触发</strong>的），后续参数表示传递给事件处理函数的数据。</p>
<p>此时，就可以通过子组件中的一个定义的事件，向父组件中传递相应的数据。</p>
<ul>
<li>子组件：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineProps, defineEmits &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps([&#x27;text&#x27;]);</span><br><span class="line"></span><br><span class="line">const emit = defineEmits([&#x27;ok&#x27;]);</span><br><span class="line"></span><br><span class="line">function send() &#123;</span><br><span class="line">  emit(&#x27;ok&#x27;, &#x27;hello&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click=&quot;send&quot; class=&quot;button&quot;&gt;&#123;&#123; props.text &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.button &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  line-height: 50px;</span><br><span class="line">  background-color: aliceblue;</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>父组件：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import Mybutton from &#x27;...&#x27;;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">function fn(str) &#123;</span><br><span class="line">	console.log(str); //将输出 str</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Mybutton @ok=&quot;fn&quot;&gt;&lt;/Mybutton&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>这样，当点击父组件中引用的子组件（按钮）时，就会触发子组件中的 <code>send()</code> 函数，从而触发 <code>ok</code> 事件，并像父组件中的 <code>function</code> 函数传递了 <code>hello</code> 的参数。</p>
<p>也可以直接使用 <code>this.$emit(&#39;name&#39;, args)</code> 调用，会触发 <code>name</code> 事件，然后在父组件中监听 <code>name</code> 事件即可，这样就不用预定义 <code>emit</code> 了。</p>
<p>这样，父组件的数据就传递到子组件中了。</p>
<h2 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h2><p>插槽，用于子组件中占位，父组件可向其中传入内容。</p>
<p>与 <code>props</code> 不同，插槽传入的是具体的内容，而不是数据。</p>
<p>子组件：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">	&lt;slot name=&quot;haha&quot; :msg=&quot;message&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>

<p>父组件：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template #haha=&quot;&#123; msg &#125;&quot;&gt;</span><br><span class="line">	&lt;h1&gt;HaHa&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>


<p>这样就可以把父组件中的标题放入子组件中的 <code>slot</code>，同时子组件将属性 <code>msg</code> 传给父组件，父组件可以通过 <code>v-slot:name</code> 的方式找到命名插槽，也可以简写为 <code>#name</code>，后面加上等号可以接收一个子组件的 <code>slotProps</code> 对象，然后采用 ES6 里对象结构的语法就可以直接得到 <code>message</code> 的值。（注意变量名&#x2F;键名要一样才能解构）。</p>
<p>其中父组件的 <code>template</code> 可以用子组件标签名代替。</p>
<h2 id="Vue-指令"><a href="#Vue-指令" class="headerlink" title="Vue 指令"></a>Vue 指令</h2><p>在 Vue.js 中，以 <code>v-</code> 开头的属性是 Vue 指令（directives）。指令是特殊的标记，添加在元素上的属性，用于在 DOM 上做特定的操作。</p>
<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>动态绑定，在需要绑定的元素属性前加上 <code>v-bind:</code> 即可，属性值改为变量。</p>
<p>简写为 <code>:</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div :class=&quot;str&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>

<p>这样的绑定是单向的，Vue 中的数据变动会导致 DOM 中的数据变动，但 DOM 属性变动不会导致 Vue 中的数据变动。</p>
<p>也可以绑定一个对象，这样就不需要 <code>key</code> 值，把对象中的每个键作为 <code>key</code>。</p>
<hr>
<p>动态绑定 css 属性时，情况有些不同。</p>
<p>传入的是一个对象，属性名是样式名，而 css 中很多样式名中含有 <code>-</code>，但对象的属性名是不可以包含 <code>-</code> 的，所以需要用驼峰命名法来规避。</p>
<p>动态绑定类时也可以传入一个对象，属性是对象名，属性值是布尔值。</p>
<p>通过传入对象的方式绑定 class 或 css 时，<strong>属性是常量</strong>，属性值是变量。</p>
<p>如 <code>:class=&quot;&#123; classname1: true, classname2: false, ... &#125;&quot;</code></p>
<h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>监听某个时间并执行相应的函数。</p>
<p>在事件前添加 <code>v-on:</code> 即可，例如：<code>v-on:click</code>。</p>
<p>可以简写为 <code>@click</code>。</p>
<ul>
<li><code>.prevent</code> 事件修饰符，可以阻止默认事件行为，可以组织表单提交后页面刷新，也可以点击链接后阻止导航。</li>
</ul>
<h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>在 <code>input</code> 标签中添加属性 <code>v-model=“var&quot;</code></p>
<p>变量值与输入框内的值便是<strong>双向绑定</strong>的。</p>
<p>即修改其中一个必然会影响另一个值。</p>
<p>不仅仅文本输入框可以进行双向绑定，<code>checkbox</code> 也可以，需要将绑定的值设为布尔类型。</p>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-for=&quot;(i, index) in list&quot; :key=&quot;index&quot;&gt;</span><br></pre></td></tr></table></figure></div>

<p>这里通过遍历 <code>list</code> 并且按照其中元素个数渲染多个 <code>div</code>，<code>i</code> 是形参，代表 <code>list</code> 中的值，<code>index</code> 表示数组下标。</p>
<p><code>:key</code> 作用是提供唯一标识，防止渲染错误。</p>
<p>因为所有的 <code>v-for</code> 都是通过 <code>key</code> 值来渲染元素的，默认为当前数组的下标，当有多个 <code>v-for</code> 时，<code>key</code> 可能相同，就会导致渲染出错误的结果。</p>
<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>控制一个元素是否显示，属性值为布尔值。</p>
<h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>与 <code>v-show</code> 用法相同，区别在于，如果元素不显示，不会创建这个元素，而 <code>v-show</code> 只是单纯利用 CSS 将元素进行隐藏。</p>
<h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><p>与 <code>v-if</code> 相同，分支逻辑。</p>
<h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><p>与 <code>v-if</code> 相同，分支逻辑。</p>
<h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h2><p>Vue 路由，通过它我们可以避免像静态页面一样通过大量的发送请求得到不同的页面文件来实现<strong>单或多页面 APP</strong>。</p>
<p>与多页面静态网页 APP 相比，Vue 实现的多页面 APP 区别在哪里？</p>
<ul>
<li>HTML 多页面：<ul>
<li>每次更换页面都需要重新加载整个页面文件。</li>
<li>不同的页面对应着不同的页面文件。</li>
</ul>
</li>
<li>Vue 实现多页面：<ul>
<li>每次更换页面只需要请求需要的组件。（或者初始加载时一次性请求所有可能用到的组件，这样切换很快但初始加载很慢，所以用到懒加载技术实现按需加载）</li>
<li>只有一个页面文件，通过修改 <code>url</code> 修改不同组件的呈现。</li>
</ul>
</li>
</ul>
<p><strong>流程</strong>：</p>
<pre class="mermaid">flowchart LR;
    1["制定路由规则(index.js)"]-->2["使用规则(main.js)"] & 3["创建组件(views.vue)"]-->4["渲染路由" router-view];</pre>

<p>注意：</p>
<ul>
<li><code>a</code> 标签会产生新的请求，所以要使用 <code>router-link</code>。</li>
<li>JS 里属性名不可以包含 <code>-</code>，所以使用驼峰命名代替。</li>
</ul>
<h3 id="export-import"><a href="#export-import" class="headerlink" title="export &amp; import"></a>export &amp; import</h3><ol>
<li>Default Export</li>
</ol>
<p>每个模块可以有且最多一个的默认导出值。</p>
<p>默认导出在导入时，可以随意命名，并且可以不需要花括号。</p>
<ol start="2">
<li>Named Export</li>
</ol>
<p>可以导出多个值。</p>
<p>在导入时，只能使用这个变量的名字，且必须使用花括号包裹。</p>
<h1 id="Vue-项目"><a href="#Vue-项目" class="headerlink" title="Vue 项目"></a>Vue 项目</h1><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>页面本身是一个根组件。</p>
<p>不同的区域是不同的组件。</p>
<h2 id="创建-Vue"><a href="#创建-Vue" class="headerlink" title="创建 Vue"></a>创建 Vue</h2><h3 id="CDN-创建"><a href="#CDN-创建" class="headerlink" title="CDN 创建"></a>CDN 创建</h3><p>推荐小白先使用这个，因为 CLI 方式生成的结构比较复杂，令人费解。</p>
<p>将 <code>&lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;</code> 引入至 HTML 的 <code>head</code> 标签后便可使用。</p>
<p>创建一个 Vue APP：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;&#125;).mount(&#x27;#app&#x27;);</span><br></pre></td></tr></table></figure></div>

<p>代表创建一个 APP，条件是一个对象，挂载在 DOM 中的 <code>#app</code> 节点上。</p>
<h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><p>命令行 <code>cd</code> 至目标目录，输入 <code>npm create vue@latest</code>。</p>
<h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>安装依赖：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></div>

<p>本地运行（基于 <a class="link"   href="https://vitejs.dev/" >Vite<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></div>

<h2 id="打包和发布"><a href="#打包和发布" class="headerlink" title="打包和发布"></a>打包和发布</h2><p>使用 <code>npm run build</code> 来构建项目，你会得到一个 <code>dist</code> 文件夹，里面就装有你打包好的文件，注意这里面的 <code>index.html</code> 文件所引入的 CSS 和 JS 路径均为绝对路径，要<strong>改为相对路径</strong>否则网页在云端预览时将会是一片空白，因为网页内容由 JS 生成。</p>
<p>如何发布？</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>然后去 Github 创建一个仓库。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin ...</span><br><span class="line">git push -u origin ...</span><br></pre></td></tr></table></figure></div>

<p>具体看 Github 创建仓库后下面的提示。</p>
<p>（这里的 <code>-u</code> 是指设置上游分支，即默认分支，设置好后以后只需要使用 <code>git push</code> 和 <code>git pull</code> 即可，不需要加上 <code>origin ...</code>）</p>
<p>然后这只是把项目的源代码上传上去了，但我想让这个项目跑起来。</p>
<p>然而上传的文件并没有 <code>dist</code> 目录，这是因为它被 <code>.gitignore</code> 文件给忽略了，我们可以使用 <code>gh-pages</code> 插件将项目文件上传到 <code>gh-pages</code> 分支。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gh-pages --save-dev</span><br></pre></td></tr></table></figure></div>

<p>在根目录的 <code>package.json</code> 文件中添加相应命令以及你的 <code>homepage</code>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;your-vue-project&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;homepage&quot;</span>: <span class="string">&quot;https://yourusername.github.io/your-repo-name&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line">    <span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;gh-pages -d dist&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    // 项目依赖</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;gh-pages&quot;</span>: <span class="string">&quot;^3.2.3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里 <code>gh-pages -d dist</code> 就是上传 <code>dist</code> 目录，然后去 Github 开启 Github Pages 并把分支改为 <code>gh-pages</code> 即可。</p>
<h2 id="Vue-实例"><a href="#Vue-实例" class="headerlink" title="Vue 实例"></a>Vue 实例</h2><p><code>createApp</code> 传入的参数是一个根组件，可以是一个 Vue 组件也可以是一个 Javascript 对象。</p>
<h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p>计算属性，当里面的值所依赖的值发生变化时会重新计算。</p>
<p>它的值是一个对象。</p>
<p>在 Vue3 中，<code>computed()</code> 接收一个函数，返回值作为计算属性值，函数中的变量就是依赖。</p>
<h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>一个函数，返回的是一个对象，里面包含着需要用到的数据。</p>
<p>将作为 Vue 实例的一个属性，在这个对象内访问 data 中的值时需要 <code>this.</code>。</p>
<p>属性名和属性值相同时可以只写属性名。（ES6）</p>
<h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><p>一个对象，里面可以定义各种方法，相当于方法版的 data。</p>
<h3 id="components"><a href="#components" class="headerlink" title="components"></a>components</h3><p>一个对象，用于注册子组件，里面包含着需要注册的子组件，需要提前 <code>import</code>。</p>
<h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>一个对象，可以在子组件的导出对象中定义 <code>props</code>，这个对象的属性代表父组件中可以传递给子组件的属性，属性值为这个属性所接收的值类型。</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">	<span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="title class_">Number</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="ES6-模块"><a href="#ES6-模块" class="headerlink" title="ES6 模块"></a>ES6 模块</h3><p>使用 <code>export</code> 关键字进行导出，可以导出任何值。</p>
<p>可以使用 <code>export default</code> 关键字导出一个默认的值。</p>
<p>在另一个文件内使用 <code>import &#123;name1, name2&#125; from &#39;././...&#39;</code> 导入。</p>
<p>同时需要在 HTML 文件中的 <code>script</code> 标签加入 <code>type=&quot;module&quot;</code>。</p>
]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
